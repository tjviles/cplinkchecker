"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const one_blink_api_1 = __importDefault(require("../lib/one-blink-api"));
class DataManager extends one_blink_api_1.default {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     *
     * const dataManager = new OneBlink.DataManager(options)
     * ```
     */
    constructor(options) {
        options = options || {};
        super(options.accessKey, options.secretKey);
    }
    /**
     * #### Example
     *
     * ```javascript
     * const { formId, formElements } = await dataManager.getFormDefinition(2)
     * ```
     *
     * @param id The form ID to get the definition for.
     * @returns
     */
    async getFormDefinition(id) {
        if (typeof id !== 'number') {
            throw new Error('"id" must be a number and is required');
        }
        return await super.searchRequest(`/form-store/elements`, {
            formId: id,
        });
    }
    /**
     * #### Example
     *
     * ```javascript
     * const { submissions, meta } = await dataManager.searchRecords({
     *   formId: 1,
     * })
     * // Use data here...
     * ```
     *
     * @param options The options for the Search Request
     * @returns
     */
    async searchRecords(options) {
        if (!options) {
            throw new Error('"options" object must be provided.');
        }
        if (typeof options.formId !== 'number') {
            throw new Error('"formId" must be a number and is required');
        }
        return await super.postRequest(`/form-store`, options);
    }
}
exports.default = DataManager;
//# sourceMappingURL=DataManager.js.map