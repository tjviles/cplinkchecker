"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const one_blink_api_1 = __importDefault(require("../lib/one-blink-api"));
class PDF extends one_blink_api_1.default {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     * const pdf = new OneBlink.PDF(options)
     * ```
     */
    constructor(options) {
        options = options || {};
        super(options.accessKey, options.secretKey);
    }
    /**
     * #### Example
     *
     * ```javascript
     * const fs = require('fs')
     * const util = require('util')
     *
     * const writeFileAsync = util.promisify(fs.writeFile)
     *
     * async function run() {
     *   const buffer = await pdf.generateFormSubmissionPDF({
     *     formId: 1,
     *     submissionId: 'c63ec3ac-12ab-447c-951c-2815d0e6fc24',
     *     isDraft: false,
     *     includeSubmissionIdInPdf: false,
     *     excludedElementIds: ['1ae6d5f5-eade-411c-b85a-45fe40fe469e'],
     *   })
     *   await writeFileAsync('./submission.pdf', buffer, 'binary')
     * }
     * ```
     *
     * @param options An object containing all parameters to be passed into the function.
     */
    async generateFormSubmissionPDF(options) {
        if (!options) {
            throw new TypeError('Must supply "options" as a string');
        }
        const { submissionId, formId, ...body } = options;
        if (!submissionId || typeof submissionId !== 'string') {
            throw new TypeError('Must supply "options.submissionId" as a string');
        }
        if (Number.isNaN(formId) || typeof formId !== 'number') {
            throw new TypeError('Must supply "options.formId" as a number');
        }
        const response = await super.request({
            origin: one_blink_api_1.default.tenant.apiOrigin,
            method: 'POST',
            path: `/forms/${formId}/submissions/${submissionId}/pdf-document`,
            headers: {
                Accept: `application/pdf`,
            },
            body: JSON.stringify(body),
        });
        return response.buffer();
    }
    /**
     * #### Example
     *
     * ```javascript
     * const fs = require('fs')
     * const util = require('util')
     *
     * const writeFileAsync = util.promisify(fs.writeFile)
     *
     * async function run() {
     *   const buffer = await pdf.generatePDF({
     *     body: {
     *       html: `
     *         <p>I will be in the middle</p>
     *       `,
     *     },
     *     header: {
     *       html: `
     *       <div style="font-size: 9px; margin: 0 15px; width: 100%; text-align: center;">
     *         I will be at the top of every page
     *       </div>
     *       `,
     *     },
     *     footer: {
     *       html: `
     *       <div style="font-size: 9px; margin: 0 15px; width: 100%; text-align: center;">
     *         I will be at the bottom of every page ({_BLINK_PAGE_NO_}/{_BLINK_PAGES_})
     *       </div>
     *       `,
     *     },
     *     page: {
     *       orientation: 'Portrait',
     *       size: 'A4',
     *       margins: {
     *         top: '15mm',
     *         right: '5mm',
     *         bottom: '15mm',
     *         left: '5mm',
     *       },
     *     },
     *   })
     *   await writeFileAsync('./custom.pdf', buffer, 'binary')
     * }
     * ```
     */
    async generatePDF(options) {
        if (!options || !options.body || !options.body.html) {
            throw new TypeError('Must supply "options.body.html" as a string');
        }
        const response = await super.request({
            origin: one_blink_api_1.default.tenant.apiOrigin,
            method: 'POST',
            path: '/pdf-document',
            body: JSON.stringify(options),
            headers: {
                Accept: `application/pdf`,
                'Content-Type': `application/json`,
            },
        });
        return response.buffer();
    }
}
exports.default = PDF;
//# sourceMappingURL=PDF.js.map