"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const one_blink_api_1 = __importDefault(require("../lib/one-blink-api"));
const verify_jwt_1 = __importDefault(require("../lib/verify-jwt"));
const basePath = `/forms-apps`;
class FormsApps extends one_blink_api_1.default {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     * const formsAppsSDK = new OneBlink.FormsApps(options)
     * ```
     */
    constructor(options) {
        options = options || {};
        super(options.accessKey, options.secretKey);
    }
    /**
     * A Static function to verify a JWT and return its result
     *
     * #### Example
     *
     * ```javascript
     * const token =
     *   'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
     * // or
     * const token =
     *   'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
     * OneBlink.FormsApps.verifyJWT(token)
     *   .then((result) => {
     *     // Result is Decoded Token
     *   })
     *   .catch((e) => {
     *     // Token was invalid
     *   })
     * ```
     *
     * @param token The JWT you wish to verify
     */
    static async verifyJWT(token) {
        return (0, verify_jwt_1.default)(token, one_blink_api_1.default.tenant);
    }
    /**
     * Get a single Forms App by its identifier
     *
     * #### Example
     *
     * ```javascript
     * const formsAppId = 1
     * formsAppsSDK.getFormsApp(formsAppId).then((formsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsAppId The exact identifier of the Forms App you wish to get
     */
    async getFormsApp(formsAppId) {
        if (typeof formsAppId !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsAppId" as a number'));
        }
        return super.getRequest(`${basePath}/${formsAppId}`);
    }
    /**
     * Get a single Forms App for the Bearer token of a Forms App User
     *
     * #### Example
     *
     * ```javascript
     * const bearerToken = ''
     * formsAppsSDK.getMyFormsApp(bearerToken).then((formsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsAppUserToken The Bearer token in the `Authorization` header
     *   from a request from an App User
     */
    async getMyFormsApp(formsAppUserToken) {
        if (typeof formsAppUserToken !== 'string') {
            return Promise.reject(new TypeError('Must supply "formsAppUserToken" as a string'));
        }
        const response = await super.request({
            origin: one_blink_api_1.default.tenant.apiOrigin,
            method: 'GET',
            path: '/my-forms-app',
            headers: {
                Authorization: `Bearer ${formsAppUserToken}`,
            },
        });
        return await response.json();
    }
    /**
     * Create a Forms App
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.createFormsApp(formsApp).then((savedFormsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsApp Forms App properties
     */
    async createFormsApp(formsApp) {
        return super.postRequest(basePath, formsApp);
    }
    /**
     * Update a Forms App
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.updateFormsApp(formsApp).then((savedFormsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsApp Forms App properties
     */
    async updateFormsApp(formsApp) {
        if (!formsApp || typeof formsApp.id !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsApp.id" as a number'));
        }
        return super.putRequest(`${basePath}/${formsApp.id}`, formsApp);
    }
    /**
     * Delete a Forms App by its identifier
     *
     * #### Example
     *
     * ```javascript
     * const formsAppId = 1
     * formsAppsSDK.deleteFormsApp(formsAppId).then(() => {
     *   // Forms App has been deleted...
     * })
     * ```
     *
     * @param formsAppId The exact identifier of the Forms App you wish to delete
     */
    async deleteFormsApp(formsAppId) {
        if (typeof formsAppId !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsAppId" as a number'));
        }
        return super.deleteRequest(`${basePath}/${formsAppId}`);
    }
    /**
     * Update styles for Forms App
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.updateStyles(formsAppId, styles).then(() => {
     *   // Styles have been updated...
     * })
     * ```
     *
     * @param formsAppId The exact identifier of the Forms App you wish to update the styles
     * @param styles Forms App styles properties
     */
    async updateStyles(formsAppId, styles) {
        if (typeof formsAppId !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsAppId" as a number'));
        }
        return super.putRequest(`${basePath}/${formsAppId}/styles`, styles);
    }
    /**
     * Create a Forms App User
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.createUser(formsAppUser).then((savedFormsAppUser) => {
     *   // Use Forms App User here...
     * })
     * ```
     *
     * @param formsAppUser Forms App User
     */
    async createUser(formsAppUser) {
        return super.postRequest('/appUsers', formsAppUser);
    }
    /**
     * Delete a Forms App User by its identifier
     *
     * #### Example
     *
     * ```javascript
     * const formsAppUserId = 1
     * formsAppsSDK.deleteUser(formsAppUserId).then(() => {
     *   // Forms App User has been deleted...
     * })
     * ```
     *
     * @param formsAppUserId The exact Forms App User identifier you wish to delete
     */
    async deleteUser(formsAppUserId) {
        if (typeof formsAppUserId !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsAppUserId" as a number'));
        }
        return super.deleteRequest(`/appUsers/${formsAppUserId}`);
    }
    /**
     * Get the email address forms app emails will be sent from
     *
     * #### Example
     *
     * ```javascript
     * const res = await formsAppsSDK.getSendingAddress(formsAppId)
     * ```
     *
     * @param formsAppId The ID of the forms app you wish to get the sending address for
     */
    async getSendingAddress(formsAppId) {
        if (typeof formsAppId !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsAppId" as a number'));
        }
        return super.getRequest(`/v2/forms-apps/${formsAppId}/sending-address`);
    }
    /**
     * Set the email address forms app emails will be sent from
     *
     * #### Example
     *
     * ```javascript
     * const res = await formsAppsSDK.setSendingAddress(
     *   formsAppId,
     *   sendingAddressConfig,
     * )
     * ```
     *
     * @param formsAppId The ID of the forms app you wish to set the sending address for
     * @param sendingAddressConfig The object containing the `emailAddress` &
     *   `emailName` properties
     */
    async setSendingAddress(formsAppId, sendingAddressConfig) {
        if (typeof formsAppId !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsAppId" as a number'));
        }
        if (!sendingAddressConfig) {
            return Promise.reject(new TypeError('Must supply an object containing "emailAddress" & "emailName" properties'));
        }
        if (typeof sendingAddressConfig.emailAddress !== 'string') {
            return Promise.reject(new TypeError('Must supply "emailAddress" as a string'));
        }
        if (sendingAddressConfig.emailName &&
            typeof sendingAddressConfig.emailName !== 'string') {
            return Promise.reject(new TypeError('Must supply "emailName" as a string or not at all'));
        }
        return super.postRequest(`/v2/forms-apps/${formsAppId}/sending-address`, {
            emailAddress: sendingAddressConfig.emailAddress,
            emailName: sendingAddressConfig.emailName,
        });
    }
    /**
     * Remove a custom sending address for a forms app
     *
     * #### Example
     *
     * ```javascript
     * const formsAppId = 1
     * await formsAppsSDK.deleteSendingAddress(formsAppId)
     * ```
     *
     * @param formsAppId The ID of the forms app you wish to remove the sending address from
     */
    async deleteSendingAddress(formsAppId) {
        if (typeof formsAppId !== 'number') {
            return Promise.reject(new TypeError('Must supply "formsAppId" as a number'));
        }
        return super.deleteRequest(`/forms-apps/${formsAppId}/sending-address`);
    }
}
exports.default = FormsApps;
//# sourceMappingURL=FormsApps.js.map