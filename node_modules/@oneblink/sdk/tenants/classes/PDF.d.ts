/// <reference types="node" />
import { PDFTypes, SubmissionEventTypes } from '@oneblink/types';
import OneBlinkAPI from '../lib/one-blink-api';
import { ConstructorOptions } from '../types';
export default class PDF extends OneBlinkAPI {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     * const pdf = new OneBlink.PDF(options)
     * ```
     */
    constructor(options: ConstructorOptions);
    /**
     * #### Example
     *
     * ```javascript
     * const fs = require('fs')
     * const util = require('util')
     *
     * const writeFileAsync = util.promisify(fs.writeFile)
     *
     * async function run() {
     *   const buffer = await pdf.generateFormSubmissionPDF({
     *     formId: 1,
     *     submissionId: 'c63ec3ac-12ab-447c-951c-2815d0e6fc24',
     *     isDraft: false,
     *     includeSubmissionIdInPdf: false,
     *     excludedElementIds: ['1ae6d5f5-eade-411c-b85a-45fe40fe469e'],
     *   })
     *   await writeFileAsync('./submission.pdf', buffer, 'binary')
     * }
     * ```
     *
     * @param options An object containing all parameters to be passed into the function.
     */
    generateFormSubmissionPDF(options: {
        /** The exact identifier of the form you wish to generate a pdf for */
        formId: number;
        /** The submission identifier generated after a successful form submission */
        submissionId: string;
        /** `true` if the submission is a draft submission, otherwise `false` */
        isDraft?: boolean;
        /**
         * `true` to include the payment details associated with the submission in
         * the PDF, otherwise `false`
         */
        includePaymentInPdf?: boolean;
        /** `true` to include the submission identifier in the PDF, otherwise `false` */
        includeSubmissionIdInPdf?: boolean;
        /** Array of elements ids to be excluded from the PDF document */
        excludedElementIds?: string[];
        /** Whether pages in the form submission should translate to page breaks in the PDF */
        usePagesAsBreaks?: boolean;
    } & SubmissionEventTypes.ApprovalFormsInclusionConfiguration): Promise<Buffer>;
    /**
     * #### Example
     *
     * ```javascript
     * const fs = require('fs')
     * const util = require('util')
     *
     * const writeFileAsync = util.promisify(fs.writeFile)
     *
     * async function run() {
     *   const buffer = await pdf.generatePDF({
     *     body: {
     *       html: `
     *         <p>I will be in the middle</p>
     *       `,
     *     },
     *     header: {
     *       html: `
     *       <div style="font-size: 9px; margin: 0 15px; width: 100%; text-align: center;">
     *         I will be at the top of every page
     *       </div>
     *       `,
     *     },
     *     footer: {
     *       html: `
     *       <div style="font-size: 9px; margin: 0 15px; width: 100%; text-align: center;">
     *         I will be at the bottom of every page ({_BLINK_PAGE_NO_}/{_BLINK_PAGES_})
     *       </div>
     *       `,
     *     },
     *     page: {
     *       orientation: 'Portrait',
     *       size: 'A4',
     *       margins: {
     *         top: '15mm',
     *         right: '5mm',
     *         bottom: '15mm',
     *         left: '5mm',
     *       },
     *     },
     *   })
     *   await writeFileAsync('./custom.pdf', buffer, 'binary')
     * }
     * ```
     */
    generatePDF(options: PDFTypes.GeneratePDFOptions): Promise<Buffer>;
}
