import OneBlinkAPI from '../lib/one-blink-api';
import { EnvironmentTypes } from '@oneblink/types';
import { ConstructorOptions, FormsAppEnvironmentsSearchOptions, FormsAppEnvironmentsSearchResult } from '../types';
export default class FormsAppEnvironments extends OneBlinkAPI {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     * const formsAppEnvironments = new OneBlink.FormsAppEnvironments(options)
     * ```
     */
    constructor(options: ConstructorOptions);
    /**
     * #### Example
     *
     * ```javascript
     * const searchParams = {
     *   limit: 1,
     *   offset: 0,
     * }
     * const { formsAppEnvironments, meta } =
     *   await formsAppEnvironments.searchFormsAppEnvironments(searchParams)
     * ```
     *
     * @param searchParams Search options
     */
    searchFormsAppEnvironments(searchParams?: FormsAppEnvironmentsSearchOptions): Promise<FormsAppEnvironmentsSearchResult>;
    /**
     * #### Example
     *
     * ```javascript
     * const formsAppEnvironment =
     *   await formsAppEnvironments.getFormsAppEnvironment(1)
     * // Use data here...
     * ```
     *
     * @param id The id of the forms app environment
     */
    getFormsAppEnvironment(formsAppEnvironmentId: number): Promise<EnvironmentTypes.FormsAppEnvironment>;
    /**
     * #### Example
     *
     * ```javascript
     * const data = {
     *   name: 'my first environment'
     *   description: 'Used for development'
     *   organisationId: 'abc123'
     *   slug: 'my-env-slug'
     *   cloneOptions: {
     *     sourceFormsAppEnvironmentId: 1
     *     isCloningFormElementOptionsSets: true
     *     isCloningFormElementLookups: true
     *     isCloningFormSubmissionEvents: true
     *     isCloningFormPostSubmissionActions: true
     *     isCloningFormServerValidation: true
     *     isCloningFormExternalIdGeneration: true
     *   }
     * }
     * const formsAppEnvironment = await formsAppEnvironments.createFormsAppEnvironment(
     *   data,
     * )
     * // Use formsAppEnvironment here...
     * ```
     *
     * @param newFormsAppEnvironment The data for the new forms app environment
     */
    createFormsAppEnvironment(newFormsAppEnvironment: EnvironmentTypes.NewFormsAppEnvironment): Promise<EnvironmentTypes.FormsAppEnvironment>;
    /**
     * #### Example
     *
     * ```javascript
     * const data = {
     *   name: 'my first environment'
     *   description: 'Used for development ONLY'
     *   organisationId: 'abc123'
     *   slug: 'my-env-slug'
     * }
     * const formsAppEnvironment = await formsAppEnvironments.updateFormsAppEnvironment(
     *   data,
     * )
     * // Use formsAppEnvironment here...
     * ```
     *
     * @param formsAppEnvironment The data for the forms app environment template to update
     */
    updateFormsAppEnvironment(formsAppEnvironment?: EnvironmentTypes.FormsAppEnvironment): Promise<EnvironmentTypes.FormsAppEnvironment>;
    /**
     * #### Example
     *
     * ```javascript
     * await formsAppEnvironments.deleteEmailTemplate(1)
     * ```
     *
     * @param id The id of the forms app environment to delete
     */
    deleteFormsAppEnvironment(formsAppEnvironmentId: number): Promise<void>;
}
