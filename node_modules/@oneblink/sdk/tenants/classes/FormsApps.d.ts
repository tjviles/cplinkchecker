import { FormsAppsTypes } from '@oneblink/types';
import OneBlinkAPI from '../lib/one-blink-api';
import { ConstructorOptions } from '../types';
export default class FormsApps extends OneBlinkAPI {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     * const formsAppsSDK = new OneBlink.FormsApps(options)
     * ```
     */
    constructor(options: ConstructorOptions);
    /**
     * A Static function to verify a JWT and return its result
     *
     * #### Example
     *
     * ```javascript
     * const token =
     *   'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
     * // or
     * const token =
     *   'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
     * OneBlink.FormsApps.verifyJWT(token)
     *   .then((result) => {
     *     // Result is Decoded Token
     *   })
     *   .catch((e) => {
     *     // Token was invalid
     *   })
     * ```
     *
     * @param token The JWT you wish to verify
     */
    static verifyJWT<T extends Record<string, unknown>>(token: string): Promise<T>;
    /**
     * Get a single Forms App by its identifier
     *
     * #### Example
     *
     * ```javascript
     * const formsAppId = 1
     * formsAppsSDK.getFormsApp(formsAppId).then((formsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsAppId The exact identifier of the Forms App you wish to get
     */
    getFormsApp(formsAppId: number): Promise<FormsAppsTypes.FormsApp>;
    /**
     * Get a single Forms App for the Bearer token of a Forms App User
     *
     * #### Example
     *
     * ```javascript
     * const bearerToken = ''
     * formsAppsSDK.getMyFormsApp(bearerToken).then((formsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsAppUserToken The Bearer token in the `Authorization` header
     *   from a request from an App User
     */
    getMyFormsApp(formsAppUserToken?: unknown): Promise<FormsAppsTypes.FormsApp>;
    /**
     * Create a Forms App
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.createFormsApp(formsApp).then((savedFormsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsApp Forms App properties
     */
    createFormsApp(formsApp: Omit<FormsAppsTypes.NewFormsApp, 'styles'>): Promise<FormsAppsTypes.FormsApp>;
    /**
     * Update a Forms App
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.updateFormsApp(formsApp).then((savedFormsApp) => {
     *   // Use Forms App here...
     * })
     * ```
     *
     * @param formsApp Forms App properties
     */
    updateFormsApp(formsApp: FormsAppsTypes.FormsApp): Promise<FormsAppsTypes.FormsApp>;
    /**
     * Delete a Forms App by its identifier
     *
     * #### Example
     *
     * ```javascript
     * const formsAppId = 1
     * formsAppsSDK.deleteFormsApp(formsAppId).then(() => {
     *   // Forms App has been deleted...
     * })
     * ```
     *
     * @param formsAppId The exact identifier of the Forms App you wish to delete
     */
    deleteFormsApp(formsAppId: number): Promise<void>;
    /**
     * Update styles for Forms App
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.updateStyles(formsAppId, styles).then(() => {
     *   // Styles have been updated...
     * })
     * ```
     *
     * @param formsAppId The exact identifier of the Forms App you wish to update the styles
     * @param styles Forms App styles properties
     */
    updateStyles(formsAppId: number, styles: FormsAppsTypes.BaseFormsAppStyles | FormsAppsTypes.FormsListStyles): Promise<FormsAppsTypes.FormsListStyles>;
    /**
     * Create a Forms App User
     *
     * #### Example
     *
     * ```javascript
     * formsAppsSDK.createUser(formsAppUser).then((savedFormsAppUser) => {
     *   // Use Forms App User here...
     * })
     * ```
     *
     * @param formsAppUser Forms App User
     */
    createUser(formsAppUser: FormsAppsTypes.NewFormsAppUser): Promise<FormsAppsTypes.FormsAppUser>;
    /**
     * Delete a Forms App User by its identifier
     *
     * #### Example
     *
     * ```javascript
     * const formsAppUserId = 1
     * formsAppsSDK.deleteUser(formsAppUserId).then(() => {
     *   // Forms App User has been deleted...
     * })
     * ```
     *
     * @param formsAppUserId The exact Forms App User identifier you wish to delete
     */
    deleteUser(formsAppUserId: number): Promise<void>;
    /**
     * Get the email address forms app emails will be sent from
     *
     * #### Example
     *
     * ```javascript
     * const res = await formsAppsSDK.getSendingAddress(formsAppId)
     * ```
     *
     * @param formsAppId The ID of the forms app you wish to get the sending address for
     */
    getSendingAddress(formsAppId: number): Promise<FormsAppsTypes.FormsAppSendingAddressResponse>;
    /**
     * Set the email address forms app emails will be sent from
     *
     * #### Example
     *
     * ```javascript
     * const res = await formsAppsSDK.setSendingAddress(
     *   formsAppId,
     *   sendingAddressConfig,
     * )
     * ```
     *
     * @param formsAppId The ID of the forms app you wish to set the sending address for
     * @param sendingAddressConfig The object containing the `emailAddress` &
     *   `emailName` properties
     */
    setSendingAddress(formsAppId: number, sendingAddressConfig: {
        emailAddress: string;
        emailName?: string;
    }): Promise<FormsAppsTypes.FormsAppSendingAddressResponse>;
    /**
     * Remove a custom sending address for a forms app
     *
     * #### Example
     *
     * ```javascript
     * const formsAppId = 1
     * await formsAppsSDK.deleteSendingAddress(formsAppId)
     * ```
     *
     * @param formsAppId The ID of the forms app you wish to remove the sending address from
     */
    deleteSendingAddress(formsAppId: number): Promise<void>;
}
