"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const one_blink_api_1 = __importDefault(require("../lib/one-blink-api"));
const upload_asset_1 = __importDefault(require("../lib/upload-asset"));
class Organisations extends one_blink_api_1.default {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     * const organisations = new OneBlink.Organisations(options)
     * ```
     */
    constructor(options) {
        options = options || {};
        super(options.accessKey, options.secretKey);
    }
    /**
     * #### Example
     *
     * ```javascript
     * const organisation = await organisations.getOrganisation()
     * // Use organisation here...
     * ```
     */
    async getOrganisation() {
        const searchResponse = await super.getRequest('/organisations');
        if (!searchResponse.organisations || !searchResponse.organisations[0]) {
            throw new TypeError('You do not have access to any organisations');
        }
        return searchResponse.organisations[0];
    }
    /**
     * #### Example
     *
     * ```javascript
     * const asset = {
     *   assetData: 'some kind of data',
     *   assetFileName: 'myfile.png',
     *   assetContentType: 'image/png',
     * }
     * const { location } = await organisations.uploadAsset(asset)
     * // Use location here...
     * ```
     *
     * @param asset The properties of the asset to upload
     */
    async uploadAsset(asset) {
        if (typeof asset.assetFileName !== 'string') {
            throw new TypeError('Must supply "assetFileName" as a string');
        }
        if (asset.assetContentType && typeof asset.assetContentType !== 'string') {
            throw new TypeError('If supplied, "assetContentType" must be a string');
        }
        const { id: organisationId } = await this.getOrganisation();
        const credentials = await super.postRequest('/asset-upload-credentials', {
            assetPath: `assets/${asset.assetFileName}`,
            organisationId,
        });
        const uploadDetails = await (0, upload_asset_1.default)(credentials, asset.assetData, asset.assetContentType);
        return { location: uploadDetails.Location };
    }
}
exports.default = Organisations;
//# sourceMappingURL=Organisations.js.map