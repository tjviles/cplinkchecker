"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const one_blink_api_1 = __importDefault(require("../lib/one-blink-api"));
const pre_fill_data_1 = __importDefault(require("../lib/pre-fill-data"));
const newJobSchema = joi_1.default.object()
    .required()
    .keys({
    username: joi_1.default.string().required(),
    formId: joi_1.default.number().required().min(1),
    externalId: joi_1.default.string(),
    details: joi_1.default.object().required().keys({
        key: joi_1.default.string(),
        title: joi_1.default.string().required(),
        description: joi_1.default.string(),
        type: joi_1.default.string(),
        priority: joi_1.default.number(),
    }),
});
class Jobs extends one_blink_api_1.default {
    /**
     * #### Example
     *
     * ```typescript
     * const OneBlink = require('@oneblink/sdk')
     *
     * const options = {
     *   accessKey: '123455678901ABCDEFGHIJKL',
     *   secretKey: '123455678901ABCDEFGHIJKL123455678901ABCDEFGHIJKL',
     * }
     * const jobs = new OneBlink.Jobs(options)
     * ```
     */
    constructor(options) {
        options = options || {};
        super(options.accessKey, options.secretKey);
    }
    /**
     * Create a single Job
     *
     * #### Example
     *
     * ```javascript
     * const newJob = {
     *   username: 'user@domain.io',
     *   formId: 1,
     *   externalId: 'your-job-identifier',
     *   details: {
     *     key: 'JOB-123',
     *     title: 'Job Title',
     *     description: 'Job description',
     *     type: 'Type',
     *     priority: 3,
     *   },
     * }
     *
     * const preFillData = {
     *   text_element: 'abc',
     *   number_element: 123,
     * }
     *
     * jobs.createJob(newJob, preFillData).then((job) => {
     *   // job.id can be used to delete the Job
     * })
     * ```
     *
     * @param data The Job to create
     * @param preFillData Key/value pairs with the form field names as keys and
     *   the pre-fill data as the values
     */
    async createJob(data, preFillData) {
        const result = newJobSchema.validate(data, { stripUnknown: true });
        if (result.error) {
            throw result.error;
        }
        const newJob = result.value;
        if (preFillData) {
            const preFillMeta = await super.postEmptyRequest(`/forms/${newJob.formId}/pre-fill-credentials`);
            await (0, pre_fill_data_1.default)(preFillMeta, preFillData);
            newJob.preFillFormDataId = preFillMeta.preFillFormDataId;
        }
        const job = await super.postRequest('/jobs', newJob);
        return job;
    }
    /**
     * Delete a single Job
     *
     * #### Example
     *
     * ```javascript
     * const jobId = 'f73985fd-2dba-4bf7-abbe-e204889f5216'
     * jobs.deleteJob(jobId).then(() => {
     *   // Job has been deleted
     * })
     * ```
     *
     * @param jobId The exact id of the job you wish to delete
     */
    deleteJob(jobId) {
        if (!jobId || typeof jobId !== 'string') {
            return Promise.reject(new TypeError('Must supply "jobId" as a string'));
        }
        return super.deleteRequest(`/jobs/${jobId}`);
    }
    /**
     * Search Jobs
     *
     * #### Example
     *
     * ```javascript
     * const results = await jobs.searchJobs({
     *   username: 'user@domain.io',
     *   formId: 10,
     * })
     *
     * // an array of jobs
     * const jobs = results.jobs
     * ```
     *
     * @param options Search options
     */
    async searchJobs(options) {
        let searchOptions = {};
        if (options) {
            if (options.externalId) {
                if (typeof options.externalId !== 'string') {
                    throw new TypeError(`externalId must be provided as a string or not at all`);
                }
                searchOptions = Object.assign(searchOptions, {
                    externalId: options.externalId,
                });
            }
            if (options.username) {
                if (typeof options.username !== 'string') {
                    throw new TypeError(`username must be provided as a string or not at all`);
                }
                searchOptions = Object.assign(searchOptions, {
                    username: options.username,
                });
            }
            if (options.isSubmitted) {
                if (typeof options.isSubmitted !== 'boolean') {
                    throw new TypeError(`isSubmitted must be provided as a boolean or not at all`);
                }
                searchOptions = Object.assign(searchOptions, {
                    isSubmitted: options.isSubmitted,
                });
            }
            if (options.formId) {
                if (typeof options.formId !== 'number') {
                    throw new TypeError(`formId must be provided as a number or not at all`);
                }
                searchOptions = Object.assign(searchOptions, {
                    formId: options.formId,
                });
            }
            if (options.limit) {
                if (typeof options.limit !== 'number') {
                    throw new TypeError(`limit must be provided as a number or not at all`);
                }
                searchOptions = Object.assign(searchOptions, { limit: options.limit });
            }
            if (options.offset) {
                if (typeof options.offset !== 'number') {
                    throw new TypeError(`offset must be provided as a number or not at all`);
                }
                searchOptions = Object.assign(searchOptions, {
                    offset: options.offset,
                });
            }
        }
        const results = await super.searchRequest(`/jobs`, searchOptions);
        return results;
    }
}
exports.default = Jobs;
//# sourceMappingURL=Jobs.js.map