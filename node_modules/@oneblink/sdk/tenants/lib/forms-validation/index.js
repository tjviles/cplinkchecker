"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateApiRequest = exports.validateConditionalPredicates = exports.validateWithPageElementSchema = exports.validateWithElementSchema = exports.validateWithFormSchema = exports.validateFormEventData = void 0;
const joi_1 = __importDefault(require("joi"));
const sdk_core_1 = require("@oneblink/sdk-core");
const forms_schema_1 = require("../forms-schema");
const property_schemas_1 = require("../forms-schema/property-schemas");
const common_1 = require("./common");
const validate_form_events_1 = __importStar(require("./validate-form-events"));
function validateFormEventData(formElements, workflowEvent) {
    const formEvent = (0, common_1.validateJoiSchema)(workflowEvent, forms_schema_1.WorkflowEventSchema, {
        stripUnknown: true,
    });
    (0, validate_form_events_1.validateFormEvent)({
        formEvent,
        propertyName: 'formEvent',
        validatedFormElements: formElements,
        rootFormElements: (0, common_1.getRootFormElements)(formElements),
    });
    return formEvent;
}
exports.validateFormEventData = validateFormEventData;
function validateWithFormSchema(form) {
    var _a;
    const validatedForm = (0, common_1.validateJoiSchema)(form, forms_schema_1.formSchema, {
        stripUnknown: true,
    });
    // validate element names are unique (including elements without a name with children)
    (0, common_1.validateElementNamesAcrossNestedElements)(validatedForm.elements);
    const { publishStartDate, publishEndDate } = validatedForm;
    if (!!publishStartDate && !!publishEndDate) {
        const startDate = new Date(publishStartDate);
        const endDate = new Date(publishEndDate);
        if (startDate >= endDate)
            throw new Error('Publish Start Date must be before Publish End Date');
    }
    if (!validatedForm.submissionEvents) {
        validatedForm.submissionEvents = [];
    }
    const rootFormElements = (0, common_1.getRootFormElements)(validatedForm.elements);
    // Element References
    for (const rootFormElement of rootFormElements) {
        switch (rootFormElement.type) {
            case 'summary': {
                rootFormElement.elementIds.forEach((elementId) => {
                    if (elementId === rootFormElement.id) {
                        throw new Error('Summary element cannot summarised self');
                    }
                    const summarizedElement = sdk_core_1.formElementsService.findFormElement(validatedForm.elements, (formElement) => formElement.id === elementId);
                    if (!summarizedElement) {
                        throw new Error('Summarised elementId not found');
                    }
                    const validSummaryElementTypes = [
                        'text',
                        'textarea',
                        'number',
                        'email',
                        'telephone',
                        'barcodeScanner',
                        'date',
                        'datetime',
                        'time',
                        'select',
                        'radio',
                        'checkboxes',
                        'autocomplete',
                        'calculation',
                    ];
                    if (!validSummaryElementTypes.some((type) => type === summarizedElement.type)) {
                        throw new Error('Summarised element type not valid');
                    }
                });
                break;
            }
        }
    }
    // Form Event References
    const formEventPropsToValidate = [
        'draftEvents',
        'schedulingEvents',
        'paymentEvents',
        'submissionEvents',
        'approvalEvents',
    ];
    for (const formEventProp of formEventPropsToValidate) {
        (0, validate_form_events_1.default)({
            formEvents: validatedForm[formEventProp] || [],
            propertyName: formEventProp,
            rootFormElements,
            validatedFormElements: validatedForm.elements,
        });
    }
    const defaultNotificationEmailElementId = (_a = validatedForm.approvalConfiguration) === null || _a === void 0 ? void 0 : _a.defaultNotificationEmailElementId;
    if (defaultNotificationEmailElementId) {
        const element = rootFormElements.find(({ id }) => id === defaultNotificationEmailElementId);
        if (!element) {
            throw new Error(`"approvalConfiguration.defaultNotificationEmailElementId" (${defaultNotificationEmailElementId}) does not exist in "elements"`);
        }
        if (element.type !== 'email') {
            throw new Error(`"approvalConfiguration.defaultNotificationEmailElementId" (${defaultNotificationEmailElementId}) references an element that is not type "email" (${element.type})`);
        }
    }
    return validatedForm;
}
exports.validateWithFormSchema = validateWithFormSchema;
function validateWithElementSchema(element) {
    const validatedElement = (0, common_1.validateJoiSchema)(element, forms_schema_1.elementSchema, {
        stripUnknown: true,
    });
    return validatedElement;
}
exports.validateWithElementSchema = validateWithElementSchema;
function validateWithPageElementSchema(element) {
    const validatedElement = (0, common_1.validateJoiSchema)(element, forms_schema_1.pageElementSchema, {
        stripUnknown: true,
    });
    return validatedElement;
}
exports.validateWithPageElementSchema = validateWithPageElementSchema;
function validateConditionalPredicates(predicates) {
    const schema = joi_1.default.array()
        .unique('elementId')
        .min(1)
        .items(property_schemas_1.ConditionalPredicatesItemSchema)
        .required();
    const validatedPredicates = (0, common_1.validateJoiSchema)(predicates, schema, {
        stripUnknown: true,
    });
    return validatedPredicates;
}
exports.validateConditionalPredicates = validateConditionalPredicates;
function validateApiRequest(apiRequest) {
    const validatedApiRequest = (0, common_1.validateJoiSchema)(apiRequest, forms_schema_1.apiRequestSchema, {
        stripUnknown: true,
    });
    return validatedApiRequest;
}
exports.validateApiRequest = validateApiRequest;
//# sourceMappingURL=index.js.map