"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFormEvent = void 0;
const sdk_core_1 = require("@oneblink/sdk-core");
const validateFormEvents = ({ rootFormElements, validatedFormElements, propertyName, formEvents, }) => {
    for (let formEventIndex = 0; formEventIndex < formEvents.length; formEventIndex++) {
        const formEvent = formEvents[formEventIndex];
        (0, exports.validateFormEvent)({
            formEvent,
            propertyName: `${propertyName}[${formEventIndex}]`,
            rootFormElements,
            validatedFormElements,
        });
    }
};
exports.default = validateFormEvents;
const validateFormEvent = ({ formEvent, rootFormElements, validatedFormElements, propertyName, }) => {
    // CHECK ANY CONDITIONAL ELEMENT IDS ARE IN THE FORM
    if (formEvent.conditionallyExecutePredicates &&
        formEvent.conditionallyExecute) {
        for (let conditionallyExecutePredicateIndex = 0; conditionallyExecutePredicateIndex <
            formEvent.conditionallyExecutePredicates.length; conditionallyExecutePredicateIndex++) {
            const conditionallyExecutePredicate = formEvent.conditionallyExecutePredicates[conditionallyExecutePredicateIndex];
            if (!rootFormElements.some(({ id }) => id === conditionallyExecutePredicate.elementId)) {
                throw new Error(`"${propertyName}.conditionallyExecutePredicates[${conditionallyExecutePredicateIndex}].elementId" (${conditionallyExecutePredicate.elementId}) does not exist in "elements"`);
            }
        }
    }
    switch (formEvent.type) {
        case 'CP_PAY':
        case 'WESTPAC_QUICK_WEB':
        case 'BPOINT': {
            const formElement = rootFormElements.find(({ id }) => id === formEvent.configuration.elementId);
            if (!formElement) {
                throw new Error(`"${propertyName}.configuration.elementId" (${formEvent.configuration.elementId}) does not exist in "elements"`);
            }
            if (formElement.type !== 'number' && formElement.type !== 'calculation') {
                throw new Error(`"${propertyName}.configuration.elementId" (${formEvent.configuration.elementId}) references a form element that is not a "number" or "calculation" element.`);
            }
            break;
        }
        case 'SCHEDULING': {
            const nameElementId = formEvent.configuration.nameElementId;
            if (nameElementId) {
                const formElement = rootFormElements.find(({ id }) => id === nameElementId);
                if (!formElement) {
                    throw new Error(`"${propertyName}.configuration.nameElementId" (${nameElementId}) does not exist in "elements"`);
                }
                if (formElement.type !== 'text') {
                    throw new Error(`"${propertyName}.configuration.nameElementId" (${nameElementId}) references a form element that is not a "text" element.`);
                }
            }
            const emailElementId = formEvent.configuration.emailElementId;
            if (emailElementId) {
                const formElement = rootFormElements.find(({ id }) => id === emailElementId);
                if (!formElement) {
                    throw new Error(`"${propertyName}.configuration.emailElementId" (${emailElementId}) does not exist in "elements"`);
                }
                if (formElement.type !== 'email') {
                    throw new Error(`"${propertyName}.configuration.emailElementId" (${emailElementId}) references a form element that is not an "email" element.`);
                }
            }
            break;
        }
        case 'CIVICA_CRM': {
            for (let mappingIndex = 0; mappingIndex < formEvent.configuration.mapping.length; mappingIndex++) {
                const { formElementId } = formEvent.configuration.mapping[mappingIndex];
                if (!rootFormElements.some(({ id }) => id === formElementId)) {
                    throw new Error(`"${propertyName}.configuration.mapping[${mappingIndex}].formElementId" (${formElementId}) does not exist in "elements"`);
                }
            }
            break;
        }
        case 'CP_HCMS': {
            if (formEvent.configuration.encryptedElementIds) {
                for (const elementId of formEvent.configuration.encryptedElementIds) {
                    const element = sdk_core_1.formElementsService.findFormElement(validatedFormElements, ({ id }) => id === elementId);
                    if (!element) {
                        throw new Error(`You tried to reference an element ${elementId} that does not exist on the form, in a ${formEvent.type} form event.`);
                    }
                    const allowedElementTypes = [
                        'text',
                        'email',
                        'telephone',
                        'barcodeScanner',
                        'radio',
                        'autocomplete',
                        'camera',
                        'draw',
                        'files',
                        'file',
                        'select',
                    ];
                    if (!allowedElementTypes.some((elementType) => elementType === element.type) ||
                        (element.type === 'select' && element.multi)) {
                        throw new Error('Encrypted element is not an allowed type');
                    }
                }
            }
            break;
        }
        case 'PDF': {
            validateEmailTemplateMappingElements({
                formEvent,
                validatedFormElements,
                propertyName,
            });
            if (formEvent.configuration.excludedElementIds) {
                for (const elementId of formEvent.configuration.excludedElementIds) {
                    const element = sdk_core_1.formElementsService.findFormElement(validatedFormElements, ({ id }) => id === elementId);
                    if (!element) {
                        throw new Error(`You tried to reference an element ${elementId} that does not exist on the form, in a ${formEvent.type} form event.`);
                    }
                }
            }
            break;
        }
        case 'EMAIL': {
            validateEmailTemplateMappingElements({
                formEvent,
                validatedFormElements,
                propertyName,
            });
            break;
        }
        case 'FRESHDESK_CREATE_TICKET': {
            validateFreshdeskCreateTicketMappingElements({
                formEvent,
                validatedFormElements,
                propertyName,
            });
            break;
        }
        default: {
            break;
        }
    }
};
exports.validateFormEvent = validateFormEvent;
function validateEmailTemplateMappingElements({ formEvent, validatedFormElements, propertyName, }) {
    if (formEvent.configuration.emailTemplate) {
        for (let mappingIndex = 0; mappingIndex < formEvent.configuration.emailTemplate.mapping.length; mappingIndex++) {
            const mapping = formEvent.configuration.emailTemplate.mapping[mappingIndex];
            if (mapping.type === 'FORM_ELEMENT') {
                const element = sdk_core_1.formElementsService.findFormElement(validatedFormElements, ({ id }) => id === mapping.formElementId);
                if (!element) {
                    throw new Error(`"${propertyName}.configuration.mapping[${mappingIndex}].formElementId" (${mapping.formElementId}) does not exist in "elements".`);
                }
            }
        }
    }
}
function validateFreshdeskCreateTicketMappingElements({ formEvent, validatedFormElements, propertyName, }) {
    for (let mappingIndex = 0; mappingIndex < formEvent.configuration.mapping.length; mappingIndex++) {
        const mapping = formEvent.configuration.mapping[mappingIndex];
        if (mapping.type === 'FORM_ELEMENT') {
            const element = sdk_core_1.formElementsService.findFormElement(validatedFormElements, ({ id }) => id === mapping.formElementId);
            if (!element) {
                throw new Error(`"${propertyName}.configuration.mapping[${mappingIndex}].formElementId" (${mapping.formElementId}) does not exist in "elements".`);
            }
        }
    }
}
//# sourceMappingURL=validate-form-events.js.map