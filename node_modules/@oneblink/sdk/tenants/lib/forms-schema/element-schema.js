"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
// User Input
const TextElement_1 = __importStar(require("./elements/TextElement"));
const NumberElement_1 = __importStar(require("./elements/NumberElement"));
const EmailElement_1 = __importStar(require("./elements/EmailElement"));
const PhoneElement_1 = __importStar(require("./elements/PhoneElement"));
const BarcodeElement_1 = __importStar(require("./elements/BarcodeElement"));
// User Selection
const RadioElement_1 = __importStar(require("./elements/RadioElement"));
const CheckboxElement_1 = __importStar(require("./elements/CheckboxElement"));
const SelectElement_1 = __importStar(require("./elements/SelectElement"));
const AutocompleteElement_1 = __importStar(require("./elements/AutocompleteElement"));
const BooleanElement_1 = __importStar(require("./elements/BooleanElement"));
// Date and Time
const DateElement_1 = __importStar(require("./elements/DateElement"));
const TimeElement_1 = __importStar(require("./elements/TimeElement"));
// Informational
const HeadingElement_1 = __importStar(require("./elements/HeadingElement"));
const HTMLElement_1 = __importStar(require("./elements/HTMLElement"));
const ImageElement_1 = __importStar(require("./elements/ImageElement"));
const InfoPageElement_1 = __importStar(require("./elements/InfoPageElement"));
// Advanced
const CameraElement_1 = __importStar(require("./elements/CameraElement"));
const RepeatableSetElement_1 = __importStar(require("./elements/RepeatableSetElement"));
const DrawElement_1 = __importStar(require("./elements/DrawElement"));
const CalculationElement_1 = __importStar(require("./elements/CalculationElement"));
const LocationElement_1 = __importStar(require("./elements/LocationElement"));
const FilesElement_1 = __importStar(require("./elements/FilesElement"));
const CaptchaElement_1 = __importStar(require("./elements/CaptchaElement"));
const FormElement_1 = __importStar(require("./elements/FormElement"));
const SummaryElement_1 = __importStar(require("./elements/SummaryElement"));
const ComplianceElement_1 = __importStar(require("./elements/ComplianceElement"));
// Integration
const GeoscapeElement_1 = __importStar(require("./elements/GeoscapeElement"));
const PointElement_1 = __importStar(require("./elements/PointElement"));
const CivicaStreetNameElement_1 = __importStar(require("./elements/CivicaStreetNameElement"));
const CivicaNameRecordElement_1 = __importStar(require("./elements/CivicaNameRecordElement"));
const SectionElement_1 = __importStar(require("./elements/SectionElement"));
const BsbElement_1 = __importStar(require("./elements/BsbElement"));
const AbnElement_1 = __importStar(require("./elements/AbnElement"));
const FreshdeskDependentFieldElement_1 = __importStar(require("./elements/FreshdeskDependentFieldElement"));
// Creating an object here so we get a Typescript error when adding a
// new element type and forgetting to add to the array of allowed types
const elementTypesMap = {
    [TextElement_1.textElementType]: null,
    [TextElement_1.textareaElementType]: null,
    [NumberElement_1.type]: null,
    [EmailElement_1.type]: null,
    [PhoneElement_1.type]: null,
    [BarcodeElement_1.type]: null,
    [RadioElement_1.type]: null,
    [CheckboxElement_1.type]: null,
    [SelectElement_1.type]: null,
    [AutocompleteElement_1.type]: null,
    [BooleanElement_1.type]: null,
    [DateElement_1.dateElementType]: null,
    [DateElement_1.datetimeElementType]: null,
    [TimeElement_1.type]: null,
    [HeadingElement_1.type]: null,
    [HTMLElement_1.type]: null,
    [ImageElement_1.type]: null,
    [InfoPageElement_1.type]: null,
    [CameraElement_1.type]: null,
    [RepeatableSetElement_1.type]: null,
    [DrawElement_1.type]: null,
    [CalculationElement_1.type]: null,
    [LocationElement_1.type]: null,
    [FilesElement_1.type]: null,
    [CaptchaElement_1.type]: null,
    [FormElement_1.type]: null,
    [SummaryElement_1.type]: null,
    [ComplianceElement_1.type]: null,
    [GeoscapeElement_1.type]: null,
    [PointElement_1.type]: null,
    [CivicaStreetNameElement_1.type]: null,
    [CivicaNameRecordElement_1.type]: null,
    [SectionElement_1.type]: null,
    [BsbElement_1.type]: null,
    [AbnElement_1.type]: null,
    [FreshdeskDependentFieldElement_1.type]: null,
};
const typeCase = (type) => {
    return joi_1.default.object({
        type,
    }).unknown();
};
const schema = joi_1.default.object({
    type: joi_1.default.string()
        .required()
        .valid(...Object.keys(elementTypesMap).sort()),
})
    .options({ stripUnknown: true })
    .when(typeCase('text'), {
    then: TextElement_1.default,
})
    .when(typeCase('textarea'), {
    then: TextElement_1.default,
})
    .when(typeCase('number'), {
    then: NumberElement_1.default,
})
    .when(typeCase('email'), {
    then: EmailElement_1.default,
})
    .when(typeCase('telephone'), {
    then: PhoneElement_1.default,
})
    .when(typeCase('barcodeScanner'), {
    then: BarcodeElement_1.default,
})
    .when(typeCase('radio'), {
    then: RadioElement_1.default,
})
    .when(typeCase('checkboxes'), {
    then: CheckboxElement_1.default,
})
    .when(typeCase('select'), {
    then: SelectElement_1.default,
})
    .when(typeCase('autocomplete'), {
    then: AutocompleteElement_1.default,
})
    .when(typeCase('date'), {
    then: DateElement_1.default,
})
    .when(typeCase('datetime'), {
    then: DateElement_1.default,
})
    .when(typeCase('time'), {
    then: TimeElement_1.default,
})
    .when(typeCase('heading'), {
    then: HeadingElement_1.default,
})
    .when(typeCase('html'), {
    then: HTMLElement_1.default,
})
    .when(typeCase('image'), {
    then: ImageElement_1.default,
})
    .when(typeCase('infoPage'), {
    then: InfoPageElement_1.default,
})
    .when(typeCase('camera'), {
    then: CameraElement_1.default,
})
    .when(typeCase('repeatableSet'), {
    then: RepeatableSetElement_1.default,
})
    .when(typeCase('draw'), {
    then: DrawElement_1.default,
})
    .when(typeCase('calculation'), {
    then: CalculationElement_1.default,
})
    .when(typeCase('location'), {
    then: LocationElement_1.default,
})
    .when(typeCase('files'), {
    then: FilesElement_1.default,
})
    .when(typeCase('captcha'), {
    then: CaptchaElement_1.default,
})
    .when(typeCase('form'), {
    then: FormElement_1.default,
})
    .when(typeCase('summary'), {
    then: SummaryElement_1.default,
})
    .when(typeCase('compliance'), {
    then: ComplianceElement_1.default,
})
    .when(typeCase('geoscapeAddress'), {
    then: GeoscapeElement_1.default,
})
    .when(typeCase('pointAddress'), {
    then: PointElement_1.default,
})
    .when(typeCase('boolean'), {
    then: BooleanElement_1.default,
})
    .when(typeCase('civicaStreetName'), {
    then: CivicaStreetNameElement_1.default,
})
    .when(typeCase('section'), {
    then: SectionElement_1.default,
})
    .when(typeCase('civicaNameRecord'), {
    then: CivicaNameRecordElement_1.default,
})
    .when(typeCase('bsb'), {
    then: BsbElement_1.default,
})
    .when(typeCase('abn'), {
    then: AbnElement_1.default,
})
    .when(typeCase(FreshdeskDependentFieldElement_1.type), {
    then: FreshdeskDependentFieldElement_1.default,
});
exports.default = schema;
//# sourceMappingURL=element-schema.js.map