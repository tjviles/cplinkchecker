"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachment = exports.base64DataRegex = exports.JoiRange = exports.optionTypes = exports.SEARCH_OPTION_TYPE = exports.FRESHDESK_FIELD_OPTION_TYPE = exports.DYNAMIC_OPTION_TYPE = exports.CUSTOM_OPTION_TYPE = void 0;
const joi_1 = __importDefault(require("joi"));
exports.CUSTOM_OPTION_TYPE = 'CUSTOM';
exports.DYNAMIC_OPTION_TYPE = 'DYNAMIC';
exports.FRESHDESK_FIELD_OPTION_TYPE = 'FRESHDESK_FIELD';
exports.SEARCH_OPTION_TYPE = 'SEARCH';
exports.optionTypes = [
    exports.CUSTOM_OPTION_TYPE,
    exports.DYNAMIC_OPTION_TYPE,
    exports.FRESHDESK_FIELD_OPTION_TYPE,
];
exports.JoiRange = joi_1.default.extend((joi) => ({
    type: 'range',
    base: joi.number(),
    messages: {
        'range.within': 'Must not exceed range of values {{#min}} and {{#max}}: ({{#v}})',
    },
    rules: {
        within: {
            method(min, max) {
                return this.$_addRule({ name: 'within', args: { min, max } });
            },
            args: [
                {
                    name: 'min',
                    ref: true,
                    assert: joi.number(),
                },
                {
                    name: 'max',
                    ref: true,
                    assert: joi.number(),
                },
            ],
            validate(value, helpers, args) {
                const max = args.max;
                const min = args.min;
                const range = max - min;
                if (value > range) {
                    return helpers.error('range.within', { v: value, min, max });
                }
                return value;
            },
        },
    },
}));
exports.base64DataRegex = /<[^>]*src="data:([a-zA-Z]*)\/([a-zA-Z]*);base64,([^"]*)".*>/m;
exports.attachment = joi_1.default.object().keys({
    id: joi_1.default.string().required(),
    url: joi_1.default.string().required().uri(),
    contentType: joi_1.default.string().required(),
    fileName: joi_1.default.string().required(),
    isPrivate: joi_1.default.boolean().required(),
    s3: joi_1.default.object()
        .keys({
        bucket: joi_1.default.string().required(),
        key: joi_1.default.string().required(),
        region: joi_1.default.string().required(),
    })
        .required(),
});
//# sourceMappingURL=common.js.map