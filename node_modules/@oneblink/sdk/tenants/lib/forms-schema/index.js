"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiRequestSchema = exports.pageElementSchema = exports.elementSchema = exports.formSchema = exports.formEventTypes = exports.WorkflowEventSchema = exports.formWorkflowEventTypes = exports.SchedulingEventSchema = exports.schedulingEventTypes = exports.PaymentEventSchema = exports.paymentEventTypes = exports.postSubmissionActions = void 0;
const joi_1 = __importDefault(require("joi"));
const element_schema_1 = __importDefault(require("./element-schema"));
exports.elementSchema = element_schema_1.default;
const property_schemas_1 = require("./property-schemas");
exports.postSubmissionActions = [
    'BACK',
    'URL',
    'CLOSE',
    'FORMS_LIBRARY',
];
const emailSubmissionEventConfiguration = {
    email: joi_1.default.alternatives([
        joi_1.default.string().email().required(),
        joi_1.default.string()
            .regex(/^{ELEMENT:\S+}$/)
            .required(),
    ]),
    emailSubjectLine: joi_1.default.string().allow(null, ''),
    emailTemplate: joi_1.default.object().keys({
        id: joi_1.default.number().required(),
        mapping: joi_1.default.array()
            .items(joi_1.default.object().keys({
            mustacheTag: joi_1.default.string()
                .regex(/^custom:\S+/)
                .required(),
            type: joi_1.default.string().valid('FORM_ELEMENT', 'TEXT').required(),
            formElementId: joi_1.default.when('type', {
                is: 'FORM_ELEMENT',
                then: joi_1.default.string().uuid().required(),
                otherwise: joi_1.default.any().strip(),
            }),
            text: joi_1.default.when('type', {
                is: 'TEXT',
                then: joi_1.default.string().required(),
                otherwise: joi_1.default.any().strip(),
            }),
        }))
            .required(),
    }),
};
const approvalFormsInclusionConfiguration = {
    approvalFormsInclusion: joi_1.default.object().keys({
        value: joi_1.default.string().required().valid('ALL', 'PARTIAL'),
        approvalStepLabels: joi_1.default.when('value', {
            is: 'PARTIAL',
            then: joi_1.default.array().required().unique().min(1).items(joi_1.default.string()),
            otherwise: joi_1.default.any().strip(),
        }),
    }),
};
const pdfSubmissionEventConfiguration = {
    pdfFileName: joi_1.default.string().allow(null, ''),
    includeSubmissionIdInPdf: joi_1.default.boolean(),
    includePaymentInPdf: joi_1.default.boolean(),
    excludedElementIds: joi_1.default.array()
        .items(joi_1.default.string().guid())
        .unique()
        .allow(null)
        .default([]),
    usePagesAsBreaks: joi_1.default.boolean(),
    ...approvalFormsInclusionConfiguration,
};
const formEventBaseSchema = {
    label: joi_1.default.string(),
    conditionallyExecute: joi_1.default.bool().default(false),
    requiresAllConditionallyExecutePredicates: joi_1.default.bool().default(false),
    conditionallyExecutePredicates: joi_1.default.when('conditionallyExecute', {
        is: true,
        then: joi_1.default.array()
            .unique('elementId')
            .min(1)
            .items(property_schemas_1.ConditionalPredicatesItemSchema)
            .required(),
        otherwise: joi_1.default.any().strip(),
    }),
};
exports.paymentEventTypes = [
    'CP_PAY',
    'BPOINT',
    'WESTPAC_QUICK_WEB',
];
exports.PaymentEventSchema = joi_1.default.object({
    type: joi_1.default.string()
        .required()
        .valid(...exports.paymentEventTypes),
    configuration: joi_1.default.object()
        .required()
        .when('type', {
        is: 'BPOINT',
        then: joi_1.default.object().keys({
            elementId: joi_1.default.string().uuid().required(),
            environmentId: joi_1.default.string().uuid().required(),
            crn2: joi_1.default.string(),
            crn3: joi_1.default.string(),
        }),
    })
        .when('type', {
        is: 'WESTPAC_QUICK_WEB',
        then: joi_1.default.object().keys({
            elementId: joi_1.default.string().uuid().required(),
            environmentId: joi_1.default.string().uuid().required(),
            customerReferenceNumber: joi_1.default.string().required(),
        }),
    })
        .when('type', {
        is: 'CP_PAY',
        then: joi_1.default.object().keys({
            elementId: joi_1.default.string().uuid().required(),
            gatewayId: joi_1.default.string().uuid().required(),
        }),
    }),
    ...formEventBaseSchema,
});
exports.schedulingEventTypes = ['SCHEDULING'];
exports.SchedulingEventSchema = joi_1.default.object({
    type: joi_1.default.string()
        .required()
        .valid(...exports.schedulingEventTypes),
    configuration: joi_1.default.object()
        .required()
        .when('type', {
        is: 'SCHEDULING',
        then: joi_1.default.object().keys({
            nylasAccountId: joi_1.default.string().required(),
            nylasSchedulingPageId: joi_1.default.number().required(),
            nameElementId: joi_1.default.string().guid(),
            emailElementId: joi_1.default.string().guid(),
            emailDescription: joi_1.default.string(),
            ...pdfSubmissionEventConfiguration,
        }),
    }),
    ...formEventBaseSchema,
});
exports.formWorkflowEventTypes = [
    'CALLBACK',
    'POWER_AUTOMATE_FLOW',
    'PDF',
    'EMAIL',
    'ONEBLINK_API',
    'TRIM',
    'CP_HCMS',
    'CIVICA_CRM',
    'FRESHDESK_CREATE_TICKET',
    'FRESHDESK_ADD_NOTE_TO_TICKET',
];
exports.WorkflowEventSchema = joi_1.default.object().keys({
    type: joi_1.default.string()
        .required()
        .valid(...exports.formWorkflowEventTypes),
    configuration: joi_1.default.object()
        .required()
        .when('type', {
        is: 'CALLBACK',
        then: joi_1.default.object().keys({
            url: joi_1.default.string().uri().required(),
            secret: joi_1.default.string().required(),
        }),
    })
        .when('type', {
        is: 'POWER_AUTOMATE_FLOW',
        then: joi_1.default.object().keys({
            url: joi_1.default.string().uri().required(),
        }),
    })
        .when('type', {
        is: 'EMAIL',
        then: joi_1.default.object().keys({
            ...emailSubmissionEventConfiguration,
            ...approvalFormsInclusionConfiguration,
        }),
    })
        .when('type', {
        is: 'PDF',
        then: joi_1.default.object().keys({
            ...emailSubmissionEventConfiguration,
            ...pdfSubmissionEventConfiguration,
        }),
    })
        .when('type', {
        is: 'ONEBLINK_API',
        then: joi_1.default.object().keys({
            apiId: joi_1.default.string().required(),
            apiEnvironment: joi_1.default.string().required(),
            apiEnvironmentRoute: joi_1.default.string().required(),
            secret: joi_1.default.string().required(),
        }),
    })
        .when('type', {
        is: 'TRIM',
        then: joi_1.default.object().keys({
            environmentId: joi_1.default.string().uuid().required(),
            recordTitle: joi_1.default.string().allow(null, ''),
            container: joi_1.default.object().keys({
                uri: joi_1.default.number().required(),
                label: joi_1.default.string().required(),
            }),
            recordType: joi_1.default.object().keys({
                uri: joi_1.default.number().required(),
                label: joi_1.default.string().required(),
            }),
            actionDefinition: joi_1.default.object().keys({
                uri: joi_1.default.number().required(),
                label: joi_1.default.string().required(),
            }),
            location: joi_1.default.object().keys({
                uri: joi_1.default.number().required(),
                label: joi_1.default.string().required(),
            }),
            author: joi_1.default.object()
                .keys({
                uri: joi_1.default.number().required(),
                label: joi_1.default.string().required(),
            })
                .allow(null),
            groupFiles: joi_1.default.boolean().default(false),
            ...pdfSubmissionEventConfiguration,
        }),
    })
        .when('type', {
        is: 'CIVICA_CRM',
        then: joi_1.default.object().keys({
            environmentId: joi_1.default.string().uuid().required(),
            civicaCustomerContactMethod: joi_1.default.object({
                code: joi_1.default.string().required(),
                description: joi_1.default.string().required(),
            }).required(),
            civicaCategory: joi_1.default.object({
                id: joi_1.default.number().required(),
                label: joi_1.default.string().required(),
            }).required(),
            mapping: joi_1.default.array()
                .required()
                .min(1)
                .unique('civicaCategoryItemNumber')
                .items(joi_1.default.object({
                civicaCategoryItemNumber: joi_1.default.number().required(),
                formElementId: joi_1.default.string().uuid().required(),
                isDescription: joi_1.default.boolean().default(false),
            })),
            ...pdfSubmissionEventConfiguration,
        }),
    })
        .when('type', {
        is: 'CP_HCMS',
        then: joi_1.default.object().keys({
            contentTypeName: joi_1.default.string()
                .regex(/^[a-z0-9-]+$/)
                .required()
                .max(40),
            encryptedElementIds: joi_1.default.array()
                .items(joi_1.default.string().guid())
                .unique()
                .allow(null),
            encryptPdf: joi_1.default.boolean().default(false),
            ...pdfSubmissionEventConfiguration,
        }),
    })
        .when('type', {
        is: 'FRESHDESK_CREATE_TICKET',
        then: joi_1.default.object().keys({
            mapping: joi_1.default.array().items(joi_1.default.object().keys({
                freshdeskFieldName: joi_1.default.string().required(),
                type: joi_1.default.string()
                    .valid('FORM_ELEMENT', 'VALUE', 'DEPENDENT_FIELD_VALUE')
                    .required(),
                formElementId: joi_1.default.when('type', {
                    is: 'FORM_ELEMENT',
                    then: joi_1.default.string().uuid().required(),
                    otherwise: joi_1.default.any().strip(),
                }),
                dependentFieldValue: joi_1.default.when('type', {
                    is: 'DEPENDENT_FIELD_VALUE',
                    then: joi_1.default.object()
                        .keys({
                        category: joi_1.default.string().required(),
                        subCategory: joi_1.default.string().required(),
                        item: joi_1.default.string().required(),
                    })
                        .required(),
                    otherwise: joi_1.default.any().strip(),
                }),
                value: joi_1.default.when('type', {
                    is: 'VALUE',
                    then: joi_1.default.alternatives().try(joi_1.default.string(), joi_1.default.number(), joi_1.default.boolean()),
                    otherwise: joi_1.default.any().strip(),
                }),
            })),
            ...approvalFormsInclusionConfiguration,
        }),
    })
        .when('type', {
        is: 'FRESHDESK_ADD_NOTE_TO_TICKET',
        then: joi_1.default.object().keys(approvalFormsInclusionConfiguration),
    }),
    ...formEventBaseSchema,
});
const pageElementSchema = joi_1.default.object().keys({
    id: joi_1.default.string().guid().required(),
    label: joi_1.default.string().required(),
    type: joi_1.default.valid('page'),
    conditionallyShow: joi_1.default.bool().default(false),
    conditionallyShowPredicates: property_schemas_1.conditionallyShowPredicates,
    requiresAllConditionallyShowPredicates: joi_1.default.bool().default(false),
    elements: joi_1.default.array()
        .required()
        .items(element_schema_1.default)
        .min(1)
        .unique('name', { ignoreUndefined: true })
        .unique('id'),
});
exports.pageElementSchema = pageElementSchema;
const apiRequestSchema = joi_1.default.object({
    type: joi_1.default.string().required().valid('CALLBACK', 'ONEBLINK_API'),
    configuration: joi_1.default.object()
        .required()
        .when('type', {
        is: 'CALLBACK',
        then: joi_1.default.object({
            url: joi_1.default.string().uri().required(),
            secret: joi_1.default.string(),
        }),
    })
        .when('type', {
        is: 'ONEBLINK_API',
        then: joi_1.default.object({
            apiId: joi_1.default.string().required(),
            apiEnvironment: joi_1.default.string().required(),
            apiEnvironmentRoute: joi_1.default.string().required(),
            secret: joi_1.default.string(),
        }),
    }),
});
exports.apiRequestSchema = apiRequestSchema;
const cannedResponsesSchema = joi_1.default.array()
    .min(1)
    .items(joi_1.default.object().required().keys({
    key: joi_1.default.string().required(),
    label: joi_1.default.string().required(),
    notes: joi_1.default.string().required(),
}))
    .unique('key');
const formSchema = joi_1.default.object().keys({
    id: joi_1.default.number(),
    formsAppEnvironmentId: joi_1.default.number().required(),
    name: joi_1.default.string().required(),
    description: joi_1.default.string().allow('', null),
    organisationId: joi_1.default.string().required(),
    elements: joi_1.default.array().when('isMultiPage', {
        is: false,
        then: joi_1.default.array()
            .required()
            .items(element_schema_1.default)
            .unique('name', { ignoreUndefined: true })
            .unique('id'),
        otherwise: joi_1.default.array().items(pageElementSchema),
    }),
    isMultiPage: joi_1.default.bool().default(false),
    isAuthenticated: joi_1.default.bool().default(false),
    publishStartDate: joi_1.default.string().isoDate(),
    publishEndDate: joi_1.default.string().isoDate(),
    // Form Events and Workflow
    draftEvents: joi_1.default.array().items(exports.WorkflowEventSchema),
    schedulingEvents: joi_1.default.array().items(exports.SchedulingEventSchema),
    paymentEvents: joi_1.default.array().items(exports.PaymentEventSchema),
    submissionEvents: joi_1.default.array().allow(null).items(exports.WorkflowEventSchema),
    approvalEvents: joi_1.default.array().items(exports.WorkflowEventSchema),
    approvalSteps: joi_1.default.array()
        .min(1)
        .unique('label')
        .items(joi_1.default.object()
        .required()
        .keys({
        label: joi_1.default.string().required(),
        group: joi_1.default.string().required(),
        isConditional: joi_1.default.boolean().default(false),
        requiresAllConditionalPredicates: joi_1.default.boolean().default(false),
        conditionalPredicates: joi_1.default.when('isConditional', {
            is: true,
            then: joi_1.default.array()
                .unique('elementId')
                .min(1)
                .items(property_schemas_1.ConditionalPredicatesItemSchema)
                .required(),
            otherwise: joi_1.default.any().strip(),
        }),
        approvalFormId: joi_1.default.number(),
        clarificationRequestEmailTemplateId: joi_1.default.number(),
    })),
    approvalConfiguration: joi_1.default.object({
        defaultNotificationEmailElementId: joi_1.default.string().guid(),
        approveCannedResponses: cannedResponsesSchema,
        clarificationRequestCannedResponses: cannedResponsesSchema,
        denyCannedResponses: cannedResponsesSchema,
        autoDenyAfterClarificationRequest: joi_1.default.object({
            days: joi_1.default.number().integer().required(),
            notify: joi_1.default.object({
                notes: joi_1.default.string().required(),
                notificationEmailAddress: joi_1.default.array().items(joi_1.default.string().required()),
                cannedResponseKey: joi_1.default.string(),
            }),
            internalNotes: joi_1.default.string(),
        }),
    }),
    postSubmissionAction: joi_1.default.string()
        .required()
        .valid(...exports.postSubmissionActions),
    redirectUrl: joi_1.default.when('postSubmissionAction', {
        is: 'URL',
        then: joi_1.default.string().required(),
        otherwise: joi_1.default.any().strip(),
    }),
    cancelAction: joi_1.default.string()
        .default('BACK')
        .valid(...exports.postSubmissionActions),
    cancelRedirectUrl: joi_1.default.when('cancelAction', {
        is: 'URL',
        then: joi_1.default.string().required(),
        otherwise: joi_1.default.any().strip(),
    }),
    isInfoPage: joi_1.default.bool().default(false),
    formsAppIds: joi_1.default.array().items(joi_1.default.number()).required(),
    createdAt: joi_1.default.string().allow('', null),
    updatedAt: joi_1.default.string().allow('', null),
    // TAGS
    tags: joi_1.default.array().default([]).items(joi_1.default.string()),
    serverValidation: apiRequestSchema,
    externalIdGeneration: apiRequestSchema,
});
exports.formSchema = formSchema;
exports.formEventTypes = [
    ...exports.formWorkflowEventTypes,
    ...exports.paymentEventTypes,
    ...exports.schedulingEventTypes,
];
//# sourceMappingURL=index.js.map