"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.datetimeElementType = exports.dateElementType = void 0;
const joi_1 = __importDefault(require("joi"));
const property_schemas_1 = require("../property-schemas");
const nowSchema = joi_1.default.valid('NOW');
const dateSchema = joi_1.default.date().iso().raw();
const daysOffsetSchema = joi_1.default.number().integer();
const fromDate = joi_1.default.alternatives([dateSchema, nowSchema]).allow(null);
const toDate = joi_1.default.when('fromDate', {
    is: joi_1.default.date().iso().raw().required(),
    // SET MIN IF FROMDATE IS A STATIC DATE
    then: joi_1.default.alternatives([
        dateSchema.min(joi_1.default.ref('fromDate', { render: true })),
        nowSchema,
    ]),
    otherwise: joi_1.default.alternatives([dateSchema, nowSchema]),
}).allow(null);
const fromDateDaysOffset = joi_1.default.when('fromDate', {
    is: nowSchema.required(),
    then: daysOffsetSchema,
    otherwise: joi_1.default.any().strip(),
});
const toDateDaysOffset = joi_1.default.when('toDate', {
    is: nowSchema.required(),
    then: joi_1.default.when('fromDateDaysOffset', {
        is: daysOffsetSchema.required(),
        then: daysOffsetSchema.min(joi_1.default.ref('fromDateDaysOffset', { render: true })),
        otherwise: daysOffsetSchema,
    }),
    otherwise: joi_1.default.any().strip(),
});
exports.dateElementType = 'date';
exports.datetimeElementType = 'datetime';
exports.default = joi_1.default.object({
    ...property_schemas_1.baseSchemas,
    name: property_schemas_1.name,
    label: property_schemas_1.label,
    hint: property_schemas_1.hint,
    ...property_schemas_1.requiredSchemas,
    readOnly: property_schemas_1.readOnly,
    placeholderValue: property_schemas_1.placeholderValue,
    fromDate,
    fromDateDaysOffset,
    toDate,
    toDateDaysOffset,
    defaultValue: joi_1.default.alternatives([
        dateSchema
            .when('fromDate', {
            is: dateSchema.required(),
            then: dateSchema.min(joi_1.default.ref('fromDate', { render: true })),
        })
            .when('toDate', {
            is: dateSchema.required(),
            then: dateSchema.max(joi_1.default.ref('toDate', { render: true })),
        }),
        nowSchema,
    ]),
    defaultValueDaysOffset: joi_1.default.when('defaultValue', {
        is: nowSchema.required(),
        then: joi_1.default.number().integer(),
    }),
    ...property_schemas_1.conditionallyShowSchemas,
    ...property_schemas_1.lookupSchemas,
    customCssClasses: property_schemas_1.customCssClasses,
});
//# sourceMappingURL=DateElement.js.map