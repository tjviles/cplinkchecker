"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.type = void 0;
const joi_1 = __importDefault(require("joi"));
const common_1 = require("../common");
const property_schemas_1 = require("../property-schemas");
exports.type = 'number';
exports.default = joi_1.default.object({
    ...property_schemas_1.baseSchemas,
    name: property_schemas_1.name,
    label: property_schemas_1.label,
    hint: property_schemas_1.hint,
    ...property_schemas_1.requiredSchemas,
    readOnly: property_schemas_1.readOnly,
    placeholderValue: property_schemas_1.placeholderValue,
    ...property_schemas_1.conditionallyShowSchemas,
    ...property_schemas_1.lookupSchemas,
    isSlider: joi_1.default.when('type', {
        is: 'number',
        then: joi_1.default.boolean().default(false),
        otherwise: joi_1.default.any().strip(),
    }),
    sliderIncrement: joi_1.default.when('isSlider', {
        is: true,
        then: common_1.JoiRange.range().within(joi_1.default.ref('minNumber', { render: true }), joi_1.default.ref('maxNumber', { render: true })),
        otherwise: joi_1.default.any().strip(),
    }),
    minNumber: joi_1.default.number()
        .allow(null)
        .when('type', {
        is: joi_1.default.not('number'),
        then: joi_1.default.any().strip(),
    })
        .when('isSlider', {
        is: true,
        then: joi_1.default.required(),
    })
        .when('isInteger', {
        is: true,
        then: joi_1.default.number().integer(),
    }),
    maxNumber: joi_1.default.number()
        .when('type', {
        is: joi_1.default.not('number'),
        then: joi_1.default.any().strip(),
    })
        .when('minNumber', {
        is: joi_1.default.number().required(),
        then: joi_1.default.number().min(joi_1.default.ref('minNumber', { render: true })),
    })
        .when('isSlider', {
        is: true,
        then: joi_1.default.required(),
    })
        .when('isInteger', {
        is: true,
        then: joi_1.default.number().integer(),
    }),
    isInteger: joi_1.default.when('type', {
        is: 'number',
        then: joi_1.default.boolean().default(false),
        otherwise: joi_1.default.any().strip(),
    }),
    defaultValue: joi_1.default.when('minNumber', {
        is: joi_1.default.number().required(),
        then: joi_1.default.when('isInteger', {
            is: true,
            then: joi_1.default.number()
                .integer()
                .min(joi_1.default.ref('minNumber', { render: true })),
            otherwise: joi_1.default.number().min(joi_1.default.ref('minNumber', { render: true })),
        }),
    })
        .when('maxNumber', {
        is: joi_1.default.number().required(),
        then: joi_1.default.when('isInteger', {
            is: true,
            then: joi_1.default.number()
                .integer()
                .max(joi_1.default.ref('maxNumber', { render: true })),
            otherwise: joi_1.default.number().max(joi_1.default.ref('maxNumber', { render: true })),
        }),
    })
        .when('isInteger', {
        is: true,
        then: joi_1.default.number().integer(),
        otherwise: joi_1.default.number(),
    }),
    ...property_schemas_1.regexSchemas,
    customCssClasses: property_schemas_1.customCssClasses,
});
//# sourceMappingURL=NumberElement.js.map