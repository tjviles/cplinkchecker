"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const forms_validation_1 = require("./forms-validation");
function generateFormElement(formElementGenerationData) {
    if (!formElementGenerationData) {
        throw new Error('no form element generation data provided, please provide this data to generate a form element');
    }
    // initialise empty element object and spread data passed by user
    const formElement = { ...formElementGenerationData };
    // element property: id
    if (typeof formElement.id !== 'string') {
        formElement.id = (0, uuid_1.v4)();
    }
    // element property: options
    if (Array.isArray(formElementGenerationData.options)) {
        const options = formElementGenerationData.options.map((o, index) => {
            const option = o || {};
            return {
                ...option,
                id: (0, uuid_1.v4)(),
                label: option.label || option.value || `Option ${index + 1}`,
                value: option.value || index.toString(),
            };
        });
        formElement.options = options;
    }
    // element property: type || default to: 'text'
    if (typeof formElementGenerationData.type !== 'string') {
        formElement.type = 'text';
    }
    // element property: label || default to: {type}
    let label = '';
    if (typeof formElementGenerationData.label === 'string') {
        label = formElementGenerationData.label;
    }
    else if (typeof formElement.type === 'string') {
        label = formElement.type;
    }
    // element property: name || default to: {label(without spaces)}
    if (typeof formElementGenerationData.name !== 'string') {
        formElement.name = label.replace(/\s+/g, '_');
    }
    formElement.label = label;
    const validatedFormElement = (0, forms_validation_1.validateWithElementSchema)(formElement);
    return validatedFormElement;
}
exports.default = generateFormElement;
//# sourceMappingURL=generate-form-element.js.map