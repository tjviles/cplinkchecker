/// <reference types="node" />
import querystring from 'querystring';
import { Response, BodyInit } from 'node-fetch';
import { Tenant } from '../types';
export default class OneBlinkAPI {
    /** @internal */
    static tenant: Tenant;
    /** @internal */
    accessKey: string;
    /** @internal */
    secretKey: string;
    /** @internal */
    jwtExpiry: number;
    constructor(accessKey: unknown, secretKey: unknown);
    /** @internal */
    get defaultRequestHeaders(): Record<string, string>;
    /** @internal */
    request({ origin, method, path, body, headers, }: {
        origin: string;
        method: 'GET' | 'POST' | 'PUT' | 'DELETE';
        path: string;
        body?: BodyInit;
        headers?: Record<string, string>;
    }): Promise<Response>;
    /** @internal */
    getRequest<TOut>(path: string): Promise<TOut>;
    /** @internal */
    searchRequest<TOut>(path: string, searchParams?: querystring.ParsedUrlQueryInput): Promise<TOut>;
    /** @internal */
    putRequest<T, TOut>(path: string, payload: T): Promise<TOut>;
    /** @internal */
    postRequest<T, TOut>(path: string, payload: T): Promise<TOut>;
    /** @internal */
    postEmptyRequest<T>(path: string): Promise<T>;
    /** @internal */
    deleteRequest(path: string): Promise<void>;
}
