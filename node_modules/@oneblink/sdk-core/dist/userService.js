"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserFriendlyName = exports.parseUserProfile = void 0;
/**
 * Parse a User Profile based on a JWT payload. Will return `undefined` if not a
 * valid JWT payload
 *
 * #### Example
 *
 * ```js
 * import jwtDecode from 'jwt-decode'
 *
 * const jwtPayload = jwtDecode('a valid token from a user')
 * const userProfile = userService.parseUserProfile(jwtPayload)
 * if (userProfile) {
 *   // continue
 * }
 * ```
 *
 * @param data An object containing all parameters to be passed to the function
 */
function parseUserProfile(data) {
    var _a, _b, _c;
    if (typeof data !== 'object' || !data) {
        return;
    }
    const jwtPayload = data;
    if (typeof jwtPayload.sub !== 'string') {
        return;
    }
    const userProfile = {
        isSAMLUser: false,
        providerType: 'Cognito',
        providerUserId: jwtPayload.sub,
        userId: jwtPayload.sub,
        email: typeof jwtPayload.email === 'string' ? jwtPayload.email : undefined,
        emailVerified: typeof jwtPayload.email_verified === 'boolean'
            ? jwtPayload.email_verified
            : undefined,
        firstName: typeof jwtPayload.given_name === 'string'
            ? jwtPayload.given_name
            : undefined,
        lastName: typeof jwtPayload.family_name === 'string'
            ? jwtPayload.family_name
            : undefined,
        fullName: typeof jwtPayload.name === 'string' ? jwtPayload.name : undefined,
        picture: typeof jwtPayload.picture === 'string' ? jwtPayload.picture : undefined,
        role: typeof jwtPayload['custom:role'] === 'string'
            ? jwtPayload['custom:role']
            : undefined,
        username: typeof jwtPayload.email === 'string' ? jwtPayload.email : jwtPayload.sub,
        supervisor: {
            fullName: typeof jwtPayload['custom:supervisor_name'] === 'string'
                ? jwtPayload['custom:supervisor_name']
                : undefined,
            email: typeof jwtPayload['custom:supervisor_email'] === 'string'
                ? jwtPayload['custom:supervisor_email']
                : undefined,
            providerUserId: typeof jwtPayload['custom:supervisor_user_id'] === 'string'
                ? jwtPayload['custom:supervisor_user_id']
                : undefined,
        },
        phoneNumber: typeof jwtPayload['custom:phone_number'] === 'string'
            ? jwtPayload['custom:phone_number']
            : undefined,
        phoneNumberVerified: typeof jwtPayload['custom:phone_number_verified'] === 'boolean'
            ? jwtPayload['custom:phone_number_verified']
            : undefined,
    };
    if (!((_a = userProfile.supervisor) === null || _a === void 0 ? void 0 : _a.fullName) &&
        !((_b = userProfile.supervisor) === null || _b === void 0 ? void 0 : _b.email) &&
        !((_c = userProfile.supervisor) === null || _c === void 0 ? void 0 : _c.providerUserId)) {
        userProfile.supervisor = undefined;
    }
    if (jwtPayload.identities &&
        Array.isArray(jwtPayload.identities) &&
        jwtPayload.identities.length) {
        const { providerType, userId } = jwtPayload.identities[0];
        userProfile.providerType = providerType;
        userProfile.providerUserId = userId;
        userProfile.isSAMLUser = providerType === 'SAML';
        if (userProfile.isSAMLUser) {
            userProfile.username = jwtPayload.preferred_username || userId;
        }
    }
    return userProfile;
}
exports.parseUserProfile = parseUserProfile;
/**
 * A friendly `string` that represents the a [User Profile](#user-profile). Uses
 * first name, last name, full name, email address or username.
 *
 * #### Example
 *
 * ```js
 * const userProfile = userService.parseUserProfile(jwtPayload)
 * const name = userService.getUserFriendlyName(userProfile)
 * if (name) {
 *   // Display current user's name
 * }
 * ```
 *
 * @param userProfile
 * @returns
 */
function getUserFriendlyName(userProfile) {
    if (userProfile.fullName) {
        return userProfile.fullName;
    }
    if (userProfile.firstName || userProfile.lastName) {
        return [userProfile.firstName, userProfile.lastName].join(' ').trim();
    }
    if (userProfile.email) {
        return userProfile.email;
    }
    if (userProfile.username) {
        return userProfile.username;
    }
    return userProfile.userId;
}
exports.getUserFriendlyName = getUserFriendlyName;
//# sourceMappingURL=userService.js.map