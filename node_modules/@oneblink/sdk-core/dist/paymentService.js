"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForPaymentEvent = void 0;
const _1 = require(".");
const submissionService_1 = require("./submissionService");
/**
 * Examine a submission and its form definition to validate whether a payment
 * workflow event needs to run.
 *
 * #### Example
 *
 * ```js
 * const result = paymentService.checkForPaymentEvent(form, submission)
 * ```
 *
 * @param definition
 * @param submission
 * @returns
 */
function checkForPaymentEvent(definition, submission) {
    const paymentSubmissionEvents = definition.paymentEvents || [];
    const paymentSubmissionEvent = paymentSubmissionEvents.find((paymentSubmissionEvent) => {
        return (paymentSubmissionEvent &&
            _1.conditionalLogicService.evaluateConditionalPredicates({
                isConditional: !!paymentSubmissionEvent.conditionallyExecute,
                requiresAllConditionalPredicates: !!paymentSubmissionEvent.requiresAllConditionallyExecutePredicates,
                conditionalPredicates: paymentSubmissionEvent.conditionallyExecutePredicates || [],
                submission: submission,
                formElements: definition.elements,
            }));
    });
    if (!paymentSubmissionEvent) {
        return;
    }
    console.log('Checking if submission with payment submission event needs processing');
    const amountElement = _1.formElementsService.findFormElement(definition.elements, (element) => element.id === paymentSubmissionEvent.configuration.elementId);
    if (!amountElement || amountElement.type === 'page') {
        console.log('Form has a payment submission event but the amount element does not exist, throwing error');
        throw new Error('We could not find the configuration required to make a payment. Please contact your administrator to ensure your application configuration has been completed successfully.');
    }
    console.log('Found form element for payment submission event', amountElement);
    const amount = (0, submissionService_1.getRootElementValueById)(amountElement.id, definition.elements, submission);
    if (!amount) {
        console.log('Form has a payment submission event but the amount has been entered as 0 or not at all, finishing as normal submission');
        return;
    }
    if (typeof amount !== 'number') {
        console.log('Form has a payment submission event but the amount is not a number, throwing error');
        throw new Error('The configuration required to make a payment is incorrect. Please contact your administrator to ensure your application configuration has been completed successfully.');
    }
    const result = {
        paymentSubmissionEvent,
        amount,
    };
    return result;
}
exports.checkForPaymentEvent = checkForPaymentEvent;
//# sourceMappingURL=paymentService.js.map