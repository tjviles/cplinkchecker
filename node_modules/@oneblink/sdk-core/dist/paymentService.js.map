{"version":3,"file":"paymentService.js","sourceRoot":"","sources":["../src/paymentService.ts"],"names":[],"mappings":";;;AAKA,wBAAgE;AAChE,2DAA6D;AAE7D;;;;;;;;;;;;;GAaG;AACH,SAAgB,oBAAoB,CAClC,UAA0B,EAC1B,UAA0D;IAO1D,MAAM,uBAAuB,GAAG,UAAU,CAAC,aAAa,IAAI,EAAE,CAAA;IAC9D,MAAM,sBAAsB,GAAG,uBAAuB,CAAC,IAAI,CACzD,CAAC,sBAAsB,EAAE,EAAE;QACzB,OAAO,CACL,sBAAsB;YACtB,0BAAuB,CAAC,6BAA6B,CAAC;gBACpD,aAAa,EAAE,CAAC,CAAC,sBAAsB,CAAC,oBAAoB;gBAC5D,gCAAgC,EAC9B,CAAC,CAAC,sBAAsB,CAAC,yCAAyC;gBACpE,qBAAqB,EACnB,sBAAsB,CAAC,8BAA8B,IAAI,EAAE;gBAC7D,UAAU,EAAE,UAAU;gBACtB,YAAY,EAAE,UAAU,CAAC,QAAQ;aAClC,CAAC,CACH,CAAA;IACH,CAAC,CACF,CAAA;IAED,IAAI,CAAC,sBAAsB,EAAE;QAC3B,OAAM;KACP;IACD,OAAO,CAAC,GAAG,CACT,uEAAuE,CACxE,CAAA;IAED,MAAM,aAAa,GAAG,sBAAmB,CAAC,eAAe,CACvD,UAAU,CAAC,QAAQ,EACnB,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,sBAAsB,CAAC,aAAa,CAAC,SAAS,CAC3E,CAAA;IACD,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,IAAI,KAAK,MAAM,EAAE;QACnD,OAAO,CAAC,GAAG,CACT,2FAA2F,CAC5F,CAAA;QACD,MAAM,IAAI,KAAK,CACb,6KAA6K,CAC9K,CAAA;KACF;IAED,OAAO,CAAC,GAAG,CAAC,iDAAiD,EAAE,aAAa,CAAC,CAAA;IAE7E,MAAM,MAAM,GAAG,IAAA,2CAAuB,EACpC,aAAa,CAAC,EAAE,EAChB,UAAU,CAAC,QAAQ,EACnB,UAAU,CACX,CAAA;IAED,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,CAAC,GAAG,CACT,wHAAwH,CACzH,CAAA;QACD,OAAM;KACP;IAED,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,OAAO,CAAC,GAAG,CACT,oFAAoF,CACrF,CAAA;QACD,MAAM,IAAI,KAAK,CACb,wKAAwK,CACzK,CAAA;KACF;IAED,MAAM,MAAM,GAAG;QACb,sBAAsB;QACtB,MAAM;KACP,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC;AA7ED,oDA6EC","sourcesContent":["import {\n  FormTypes,\n  SubmissionEventTypes,\n  SubmissionTypes,\n} from '@oneblink/types'\nimport { conditionalLogicService, formElementsService } from '.'\nimport { getRootElementValueById } from './submissionService'\n\n/**\n * Examine a submission and its form definition to validate whether a payment\n * workflow event needs to run.\n *\n * #### Example\n *\n * ```js\n * const result = paymentService.checkForPaymentEvent(form, submission)\n * ```\n *\n * @param definition\n * @param submission\n * @returns\n */\nexport function checkForPaymentEvent(\n  definition: FormTypes.Form,\n  submission: SubmissionTypes.S3SubmissionData['submission'],\n):\n  | {\n      paymentSubmissionEvent: SubmissionEventTypes.FormPaymentEvent\n      amount: number\n    }\n  | undefined {\n  const paymentSubmissionEvents = definition.paymentEvents || []\n  const paymentSubmissionEvent = paymentSubmissionEvents.find(\n    (paymentSubmissionEvent) => {\n      return (\n        paymentSubmissionEvent &&\n        conditionalLogicService.evaluateConditionalPredicates({\n          isConditional: !!paymentSubmissionEvent.conditionallyExecute,\n          requiresAllConditionalPredicates:\n            !!paymentSubmissionEvent.requiresAllConditionallyExecutePredicates,\n          conditionalPredicates:\n            paymentSubmissionEvent.conditionallyExecutePredicates || [],\n          submission: submission,\n          formElements: definition.elements,\n        })\n      )\n    },\n  )\n\n  if (!paymentSubmissionEvent) {\n    return\n  }\n  console.log(\n    'Checking if submission with payment submission event needs processing',\n  )\n\n  const amountElement = formElementsService.findFormElement(\n    definition.elements,\n    (element) => element.id === paymentSubmissionEvent.configuration.elementId,\n  )\n  if (!amountElement || amountElement.type === 'page') {\n    console.log(\n      'Form has a payment submission event but the amount element does not exist, throwing error',\n    )\n    throw new Error(\n      'We could not find the configuration required to make a payment. Please contact your administrator to ensure your application configuration has been completed successfully.',\n    )\n  }\n\n  console.log('Found form element for payment submission event', amountElement)\n\n  const amount = getRootElementValueById(\n    amountElement.id,\n    definition.elements,\n    submission,\n  )\n\n  if (!amount) {\n    console.log(\n      'Form has a payment submission event but the amount has been entered as 0 or not at all, finishing as normal submission',\n    )\n    return\n  }\n\n  if (typeof amount !== 'number') {\n    console.log(\n      'Form has a payment submission event but the amount is not a number, throwing error',\n    )\n    throw new Error(\n      'The configuration required to make a payment is incorrect. Please contact your administrator to ensure your application configuration has been completed successfully.',\n    )\n  }\n\n  const result = {\n    paymentSubmissionEvent,\n    amount,\n  }\n\n  return result\n}\n"]}