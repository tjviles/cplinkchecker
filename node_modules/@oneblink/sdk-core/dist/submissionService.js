"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootElementValueById = void 0;
__exportStar(require("./replaceCustomValues"), exports);
/**
 * Takes a form element's id, the form elements and the submission data to
 * return a value from the submission.
 *
 * #### Example
 *
 * ```js
 * const value = formElementsService.getRootElementById(
 *   formElementId,
 *   form.elements,
 *   submission,
 * )
 * ```
 *
 * @param formElementId
 * @param formElements
 * @param submission
 * @returns
 */
function getRootElementValueById(formElementId, formElements, submission) {
    for (const formElement of formElements) {
        if (formElement.type === 'page' || formElement.type === 'section') {
            const value = getRootElementValueById(formElementId, formElement.elements, submission);
            if (value !== undefined) {
                return value;
            }
        }
        else if (formElement.id === formElementId) {
            return submission[formElement.name];
        }
    }
}
exports.getRootElementValueById = getRootElementValueById;
//# sourceMappingURL=submissionService.js.map