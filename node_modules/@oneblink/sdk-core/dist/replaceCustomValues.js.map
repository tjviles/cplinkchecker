{"version":3,"file":"replaceCustomValues.js","sourceRoot":"","sources":["../src/replaceCustomValues.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CivicaTypes,\n  FormTypes,\n  GeoscapeTypes,\n  MiscTypes,\n  PointTypes,\n  SubmissionTypes,\n} from '@oneblink/types'\nimport { findFormElement } from './formElementsService'\nimport { getABNNumberFromABNRecord } from './abnService'\n\nexport type CustomValuesOptions = {\n  form: FormTypes.Form\n  externalId?: string\n  submissionId: string\n  submissionTimestamp: string\n  formatDate: (value: string) => string\n  formatTime: (value: string) => string\n  formatNumber: (value: number) => string\n  formatCurrency: (value: number) => string\n  previousApprovalId?: string\n}\n\nconst CUSTOM_VALUES = [\n  {\n    string: '{INFO_PAGE_ID}',\n    value: ({ form }: CustomValuesOptions) => form.id.toString(),\n  },\n  {\n    string: '{INFO_PAGE_NAME}',\n    value: ({ form }: CustomValuesOptions) => form.name,\n  },\n  {\n    string: '{FORM_ID}',\n    value: ({ form }: CustomValuesOptions) => form.id.toString(),\n  },\n  {\n    string: '{FORM_NAME}',\n    value: ({ form }: CustomValuesOptions) => form.name,\n  },\n  {\n    string: '{DATE}',\n    value: ({\n      submissionTimestamp,\n      formatDate,\n      formatTime,\n    }: CustomValuesOptions) => {\n      if (!submissionTimestamp) {\n        return ''\n      }\n      return `${formatDate(submissionTimestamp)} ${formatTime(\n        submissionTimestamp,\n      )}`\n    },\n  },\n  {\n    string: '{TIMESTAMP}',\n    value: ({ submissionTimestamp }: CustomValuesOptions) =>\n      submissionTimestamp || '',\n  },\n  {\n    string: '{SUBMISSION_ID}',\n    value: ({ submissionId }: CustomValuesOptions) => submissionId || '',\n  },\n  {\n    string: '{EXTERNAL_ID}',\n    value: ({ externalId }: CustomValuesOptions) => externalId || '',\n  },\n  {\n    string: '{PREVIOUS_APPROVAL_ID}',\n    value: ({ previousApprovalId }: CustomValuesOptions) =>\n      previousApprovalId || '',\n  },\n]\n\n/**\n * Function to get the display value of a property in submission\n *\n * #### Example\n *\n * ```typescript\n *\n * const result = submissionService.getElementSubmissionValue({\n *   propertyName: 'search',\n *   submission: {\n *     search: 'Entered By User',\n *   },\n *   formElements: [\n *     {\n *       id: 'd4135b47-9004-4d75-aeb3-d2f6232da111',\n *       name: 'search',\n *       type: 'text',\n *       label: 'Search',\n *       readOnly: false,\n *       required: false,\n *       conditionallyShow: false,\n *       requiresAllConditionallyShowPredicates: false,\n *       isElementLookup: false,\n *       isDataLookup: false,\n *     },\n *   ],\n *   formatDate: (value) => new Date(value).toDateString(),\n *   formatTime: (value) => new Date(value).toTimeString(),\n *   formatNumber: (value) => Number(value).toString(),\n *   formatCurrency: (value) => Number(value).toFixed(2),\n * }: {\n *   propertyName: string\n *   formElements: FormTypes.FormElement[]\n *   submission: SubmissionTypes.S3SubmissionData['submission']\n *   formatDate: (value: string) => string\n *   formatTime: (value: string) => string\n *   formatNumber: (value: number) => string\n *   formatCurrency: (value: number) => string\n * })\n * ```\n *\n * @param options\n * @returns\n */\nexport function getElementSubmissionValue({\n  propertyName,\n  submission,\n  formElements,\n  formatDate,\n  formatTime,\n  formatNumber,\n  formatCurrency,\n}: {\n  propertyName: string\n  formElements: FormTypes.FormElement[]\n  submission: SubmissionTypes.S3SubmissionData['submission']\n  formatDate: (value: string) => string\n  formatTime: (value: string) => string\n  formatNumber: (value: number) => string\n  formatCurrency: (value: number) => string\n}): unknown {\n  const formElement = findFormElement(\n    formElements,\n    (element) =>\n      element.type !== 'page' &&\n      element.type !== 'section' &&\n      element.name === propertyName,\n  )\n\n  const unknown = submission[propertyName]\n  if (unknown === undefined || unknown === null) {\n    return undefined\n  }\n\n  switch (formElement?.type) {\n    case 'datetime': {\n      const value = unknown as string\n      return `${formatDate(value)} ${formatTime(value)}`\n    }\n    case 'date': {\n      const value = unknown as string\n      return formatDate(value)\n    }\n    case 'time': {\n      const value = unknown as string\n      return formatTime(value)\n    }\n    case 'radio':\n    case 'autocomplete': {\n      const value = unknown as string\n      const option = formElement.options?.find((opt) => opt.value === value)\n      return option?.label || value\n    }\n\n    case 'checkboxes': {\n      const value = unknown as string[]\n      const selectedOptionLabels: string[] = value.reduce(\n        (labels: string[], selectedOption: string) => {\n          const foundOption = formElement.options?.find(\n            (o) => o.value === selectedOption,\n          )\n          if (foundOption) labels.push(foundOption.label)\n          return labels\n        },\n        [],\n      )\n      return selectedOptionLabels.length ? selectedOptionLabels : undefined\n    }\n    case 'compliance': {\n      const value = unknown as {\n        value?: string\n      }\n      const option = (formElement.options || []).find(\n        (option: FormTypes.ChoiceElementOption) => option.value === value.value,\n      )\n      return {\n        ...value,\n        value: option?.label || value.value,\n      }\n    }\n    case 'select': {\n      if (formElement.multi) {\n        const value = unknown as string[]\n        const selectedOptionLabels: string[] = value.reduce(\n          (labels: string[], selectedOption: string) => {\n            const foundOption = formElement.options?.find(\n              (o) => o.value === selectedOption,\n            )\n            if (foundOption) labels.push(foundOption.label)\n            return labels\n          },\n          [],\n        )\n        return selectedOptionLabels.length ? selectedOptionLabels : undefined\n      } else {\n        const value = unknown as string\n        const option = formElement.options?.find((opt) => opt.value === value)\n        return option?.label || ''\n      }\n    }\n    case 'boolean': {\n      const value = unknown as boolean\n      return value ? 'Yes' : 'No'\n    }\n    case 'calculation': {\n      const value = unknown as number\n      if (!Number.isNaN(value) && Number.isFinite(value)) {\n        let text\n        if (formElement.displayAsCurrency) {\n          text = formatCurrency(value)\n        } else {\n          text = formatNumber(value)\n        }\n        return text\n      }\n      return undefined\n    }\n    case 'pointAddress':\n    case 'geoscapeAddress': {\n      const value = unknown as\n        | PointTypes.PointAddress\n        | GeoscapeTypes.GeoscapeAddress\n      return value?.addressDetails?.formattedAddress || value?.addressId\n    }\n    case 'civicaStreetName': {\n      const value = unknown as CivicaTypes.CivicaStreetName\n      return value?.formattedStreet\n    }\n    case 'civicaNameRecord': {\n      const value = unknown as CivicaTypes.CivicaNameRecord\n      return (\n        [value?.title, value?.givenName1, value?.familyName]\n          .filter((t) => t)\n          .join(' ') || value?.emailAddress\n      )\n    }\n    case 'abn': {\n      const value = unknown as MiscTypes.ABNRecord\n      return value ? getABNNumberFromABNRecord(value) : undefined\n    }\n    default: {\n      return unknown\n    }\n  }\n}\n\nfunction replaceElementValues(\n  text: string,\n  {\n    form,\n    submission,\n    formatDate,\n    formatTime,\n    formatNumber,\n    formatCurrency,\n  }: {\n    form: FormTypes.Form\n    submission: SubmissionTypes.S3SubmissionData['submission']\n    formatDate: (value: string) => string\n    formatTime: (value: string) => string\n    formatNumber: (value: number) => string\n    formatCurrency: (value: number) => string\n  },\n): string {\n  const matches = text.match(/({ELEMENT:)([^}]+)(})/g)\n  if (!matches) {\n    return text\n  }\n\n  return matches.reduce((newString, match) => {\n    const propertyName = match.substring(\n      match.indexOf(':') + 1,\n      match.lastIndexOf('}'),\n    )\n\n    const value = getElementSubmissionValue({\n      propertyName,\n      formElements: form.elements,\n      submission,\n      formatDate,\n      formatTime,\n      formatNumber,\n      formatCurrency,\n    })\n\n    return newString.replace(\n      match,\n      value === undefined ? '' : (value as string),\n    )\n  }, text)\n}\n\n/**\n * Function to replace a custom values in text\n *\n * #### Example\n *\n * ```js\n * const result = submissionService.replaceCustomValues(\n *   'https://example.com/path?submissionId={SUBMISSION_ID}&externalId={EXTERNAL_ID}&search{ELEMENT:search}',\n *   {\n *     submissionId: 'abc-123',\n *     submissionTimestamp: '2021-07-02T02:19:13.670Z',\n *     formatDate: (value) => new Date(value).toDateString(),\n *     formatTime: (value) => new Date(value).toTimeString(),\n *     submission: {\n *       search: 'Entered By User',\n *     },\n *     form: {\n *       id: 1,\n *       name: 'Form',\n *       organisationId: '',\n *       formsAppEnvironmentId: 1,\n *       formsAppIds: [],\n *       isAuthenticated: false,\n *       isMultiPage: false,\n *       isInfoPage: false,\n *       postSubmissionAction: 'FORMS_LIBRARY',\n *       cancelAction: 'FORMS_LIBRARY',\n *       submissionEvents: [],\n *       tags: [],\n *       elements: [\n *         {\n *           id: 'd4135b47-9004-4d75-aeb3-d2f6232da111',\n *           name: 'search',\n *           type: 'text',\n *           label: 'Search',\n *           readOnly: false,\n *           required: false,\n *           conditionallyShow: false,\n *           requiresAllConditionallyShowPredicates: false,\n *           isElementLookup: false,\n *           isDataLookup: false,\n *         },\n *       ],\n *     },\n *   },\n * )\n * ```\n *\n * @param text\n * @param options\n * @returns\n */\nexport function replaceCustomValues(\n  text: string,\n  {\n    form,\n    submission,\n    externalId,\n    submissionId,\n    submissionTimestamp,\n    formatDate,\n    formatTime,\n    formatNumber,\n    formatCurrency,\n    previousApprovalId,\n  }: CustomValuesOptions & {\n    submission: SubmissionTypes.S3SubmissionData['submission']\n  },\n): string {\n  const string = replaceElementValues(text, {\n    form,\n    submission,\n    formatDate,\n    formatTime,\n    formatNumber,\n    formatCurrency,\n  })\n  return CUSTOM_VALUES.reduce((newString, customValue) => {\n    return newString.replace(\n      customValue.string,\n      customValue.value({\n        form,\n        submissionTimestamp,\n        externalId,\n        submissionId,\n        formatDate,\n        formatTime,\n        formatNumber,\n        formatCurrency,\n        previousApprovalId,\n      }),\n    )\n  }, string)\n}\n"]}