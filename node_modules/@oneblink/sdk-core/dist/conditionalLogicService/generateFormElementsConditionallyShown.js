"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFormElementsConditionallyShown = void 0;
const formElementsService_1 = require("../formElementsService");
const conditionallyShowElement_1 = __importDefault(require("./conditionallyShowElement"));
const conditionallyShowOption_1 = __importDefault(require("./conditionallyShowOption"));
const __1 = require("..");
const handleConditionallyShowElement = (formElementsCtrl, element, errorCallback) => {
    try {
        return (0, conditionallyShowElement_1.default)(formElementsCtrl, element, []);
    }
    catch (error) {
        errorCallback && errorCallback(error);
        return false;
    }
};
const handleConditionallyShowOption = (formElementsCtrl, element, option, errorCallback) => {
    try {
        return (0, conditionallyShowOption_1.default)(formElementsCtrl, element, option, []);
    }
    catch (error) {
        errorCallback && errorCallback(error);
        return false;
    }
};
const generateFormElementsConditionallyShownWithParent = ({ formElements, submission, parentFormElementsCtrl, errorCallback, }) => {
    const formElementsCtrl = {
        flattenedElements: (0, formElementsService_1.flattenFormElements)(formElements),
        model: submission,
        parentFormElementsCtrl,
    };
    return formElementsCtrl.flattenedElements.reduce((formElementsConditionallyShown, element) => {
        switch (element.type) {
            case 'section':
            case 'page': {
                const formElementConditionallyShown = formElementsConditionallyShown[element.id];
                const isHidden = formElementConditionallyShown
                    ? formElementConditionallyShown.isHidden
                    : !handleConditionallyShowElement(formElementsCtrl, element, errorCallback);
                formElementsConditionallyShown[element.id] = {
                    type: 'formElement',
                    isHidden,
                };
                // If the parent element is hidden, hide all the child elements
                if (isHidden) {
                    element.elements.forEach((childElement) => {
                        switch (childElement.type) {
                            case 'section':
                            case 'page': {
                                formElementsConditionallyShown[childElement.id] = {
                                    type: 'formElement',
                                    isHidden: true,
                                };
                                break;
                            }
                            default: {
                                formElementsConditionallyShown[childElement.name] = {
                                    type: 'formElement',
                                    isHidden: true,
                                };
                            }
                        }
                    });
                }
                break;
            }
            case 'infoPage':
            case 'form': {
                if (formElementsConditionallyShown[element.name]) {
                    break;
                }
                const nestedModel = submission[element.name];
                formElementsConditionallyShown[element.name] = {
                    type: 'formElements',
                    isHidden: !handleConditionallyShowElement(formElementsCtrl, element, errorCallback),
                    formElements: generateFormElementsConditionallyShownWithParent({
                        formElements: element.elements || [],
                        submission: nestedModel || {},
                        parentFormElementsCtrl: formElementsCtrl,
                    }),
                };
                break;
            }
            case 'repeatableSet': {
                if (formElementsConditionallyShown[element.name]) {
                    break;
                }
                const entries = formElementsCtrl.model[element.name];
                formElementsConditionallyShown[element.name] = {
                    type: 'repeatableSet',
                    isHidden: !handleConditionallyShowElement(formElementsCtrl, element, errorCallback),
                    entries: (entries || []).reduce((result, entry, index) => {
                        result[index.toString()] =
                            generateFormElementsConditionallyShownWithParent({
                                formElements: element.elements,
                                submission: entry,
                                parentFormElementsCtrl: formElementsCtrl,
                            });
                        return result;
                    }, {}),
                };
                break;
            }
            default: {
                if (formElementsConditionallyShown[element.name]) {
                    break;
                }
                const formElementConditionallyShown = {
                    type: 'formElement',
                    isHidden: !handleConditionallyShowElement(formElementsCtrl, element, errorCallback),
                };
                if (!formElementConditionallyShown.isHidden) {
                    const optionsElement = __1.typeCastService.formElements.toOptionsElement(element);
                    if (optionsElement &&
                        optionsElement.conditionallyShowOptions &&
                        Array.isArray(optionsElement.options)) {
                        formElementConditionallyShown.options =
                            optionsElement.options.filter((option) => handleConditionallyShowOption(formElementsCtrl, optionsElement, option, errorCallback));
                    }
                }
                formElementsConditionallyShown[element.name] =
                    formElementConditionallyShown;
            }
        }
        return formElementsConditionallyShown;
    }, {});
};
/**
 * Given a form element and submission data, evaluate which elements are
 * currently shown. The function also takes an optional errorCallback for
 * handling errors caught during the evaluation.
 *
 * #### Example
 *
 * ```js
 * const formElementsConditionallyShown =
 *   conditionalLogicService.generateFormElementsConditionallyShown({
 *     submission: {
 *       radio: ['hide'],
 *       text: 'hidden text',
 *     },
 *     formElements: [
 *       {
 *         name: 'radio',
 *         label: 'Radio',
 *         type: 'radio',
 *         required: false,
 *         id: '5ef3beb8-8ac8-4c8d-9fd3-d8197113bf54',
 *         conditionallyShow: false,
 *         options: [
 *           {
 *             id: '9a44e15a-5929-419d-825e-b3dc0a29591f',
 *             label: 'Show',
 *             value: 'show',
 *           },
 *           {
 *             id: 'd776ed42-072c-4bf8-9879-874b2bef85d3',
 *             label: 'Hide',
 *             value: 'Hide',
 *           },
 *         ],
 *         readOnly: false,
 *         isDataLookup: false,
 *         isElementLookup: false,
 *         buttons: false,
 *         optionsType: 'CUSTOM',
 *         conditionallyShowOptions: false,
 *       },
 *       {
 *         name: 'text',
 *         label: 'Text',
 *         type: 'text',
 *         required: false,
 *         id: '8fbddb41-348d-494c-904b-56a2c4361f13',
 *         requiresAllConditionallyShowPredicates: false,
 *         conditionallyShow: true,
 *         conditionallyShowPredicates: [
 *           {
 *             elementId: '5ef3beb8-8ac8-4c8d-9fd3-d8197113bf54',
 *             optionIds: ['9a44e15a-5929-419d-825e-b3dc0a29591f'],
 *             type: 'OPTIONS',
 *           },
 *         ],
 *         readOnly: false,
 *         isDataLookup: false,
 *         isElementLookup: false,
 *       },
 *     ],
 *     parentFormElementsCtrl: undefined,
 *     errorCallback: (error) => {
 *       //do something with the error here
 *       console.error(error)
 *     },
 *   })
 * ```
 *
 * The above example returns an object like below
 *
 * ```json
 * {
 *   "radio": {
 *     "isHidden": false,
 *     "type": "formElement"
 *   },
 *   "text": {
 *     "isHidden": true,
 *     "type": "formElement"
 *   }
 * }
 * ```
 *
 * @param parameters
 * @returns
 */
function generateFormElementsConditionallyShown(parameters) {
    return generateFormElementsConditionallyShownWithParent(parameters);
}
exports.generateFormElementsConditionallyShown = generateFormElementsConditionallyShown;
//# sourceMappingURL=generateFormElementsConditionallyShown.js.map