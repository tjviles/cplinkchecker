{"version":3,"file":"generateFormElementsConditionallyShown.js","sourceRoot":"","sources":["../../src/conditionalLogicService/generateFormElementsConditionallyShown.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormTypes, SubmissionTypes } from '@oneblink/types'\nimport { FormElementsCtrl } from '../types'\nimport { flattenFormElements } from '../formElementsService'\nimport conditionallyShowElement from './conditionallyShowElement'\nimport conditionallyShowOption from './conditionallyShowOption'\nimport { typeCastService } from '..'\n\nexport type FormElementsConditionallyShown = Record<\n  string,\n  FormElementConditionallyShown\n>\n\nexport type FormElementConditionallyShown =\n  | undefined\n  | {\n      type: 'formElement'\n      isHidden: boolean\n      options?: import('@oneblink/types').FormTypes.ChoiceElementOption[]\n    }\n  | {\n      type: 'formElements'\n      isHidden: boolean\n      formElements: FormElementsConditionallyShown | undefined\n    }\n  | {\n      type: 'repeatableSet'\n      isHidden: boolean\n      entries: Record<string, FormElementsConditionallyShown | undefined>\n    }\n\nexport type ErrorCallback = (error: Error) => void\n\nconst handleConditionallyShowElement = (\n  formElementsCtrl: FormElementsCtrl,\n  element: FormTypes.FormElement,\n  errorCallback: ErrorCallback | undefined,\n) => {\n  try {\n    return conditionallyShowElement(formElementsCtrl, element, [])\n  } catch (error) {\n    errorCallback && errorCallback(error as Error)\n    return false\n  }\n}\n\nconst handleConditionallyShowOption = (\n  formElementsCtrl: FormElementsCtrl,\n  element: FormTypes.FormElementWithOptions,\n  option: FormTypes.ChoiceElementOption,\n  errorCallback: ErrorCallback | undefined,\n) => {\n  try {\n    return conditionallyShowOption(formElementsCtrl, element, option, [])\n  } catch (error) {\n    errorCallback && errorCallback(error as Error)\n    return false\n  }\n}\n\nexport type FormElementsConditionallyShownParameters = {\n  /** Form elements to evaluate */\n  formElements: FormTypes.FormElement[]\n  /** Current submission data */\n  submission: SubmissionTypes.S3SubmissionData['submission']\n  /** Optional callback for handling errors caught during the evaluation */\n  errorCallback?: ErrorCallback\n}\n\nconst generateFormElementsConditionallyShownWithParent = ({\n  formElements,\n  submission,\n  parentFormElementsCtrl,\n  errorCallback,\n}: FormElementsConditionallyShownParameters & {\n  parentFormElementsCtrl?: FormElementsCtrl['parentFormElementsCtrl']\n}): FormElementsConditionallyShown => {\n  const formElementsCtrl = {\n    flattenedElements: flattenFormElements(formElements),\n    model: submission,\n    parentFormElementsCtrl,\n  }\n  return formElementsCtrl.flattenedElements.reduce<FormElementsConditionallyShown>(\n    (formElementsConditionallyShown, element) => {\n      switch (element.type) {\n        case 'section':\n        case 'page': {\n          const formElementConditionallyShown =\n            formElementsConditionallyShown[element.id]\n          const isHidden = formElementConditionallyShown\n            ? formElementConditionallyShown.isHidden\n            : !handleConditionallyShowElement(\n                formElementsCtrl,\n                element,\n                errorCallback,\n              )\n\n          formElementsConditionallyShown[element.id] = {\n            type: 'formElement',\n            isHidden,\n          }\n\n          // If the parent element is hidden, hide all the child elements\n          if (isHidden) {\n            element.elements.forEach((childElement) => {\n              switch (childElement.type) {\n                case 'section':\n                case 'page': {\n                  formElementsConditionallyShown[childElement.id] = {\n                    type: 'formElement',\n                    isHidden: true,\n                  }\n                  break\n                }\n                default: {\n                  formElementsConditionallyShown[childElement.name] = {\n                    type: 'formElement',\n                    isHidden: true,\n                  }\n                }\n              }\n            })\n          }\n          break\n        }\n        case 'infoPage':\n        case 'form': {\n          if (formElementsConditionallyShown[element.name]) {\n            break\n          }\n          const nestedModel = submission[element.name] as\n            | SubmissionTypes.S3SubmissionData['submission']\n            | undefined\n          formElementsConditionallyShown[element.name] = {\n            type: 'formElements',\n            isHidden: !handleConditionallyShowElement(\n              formElementsCtrl,\n              element,\n              errorCallback,\n            ),\n            formElements: generateFormElementsConditionallyShownWithParent({\n              formElements: element.elements || [],\n              submission: nestedModel || {},\n              parentFormElementsCtrl: formElementsCtrl,\n            }),\n          }\n          break\n        }\n        case 'repeatableSet': {\n          if (formElementsConditionallyShown[element.name]) {\n            break\n          }\n          const entries = formElementsCtrl.model[element.name] as\n            | Array<SubmissionTypes.S3SubmissionData['submission']>\n            | undefined\n          formElementsConditionallyShown[element.name] = {\n            type: 'repeatableSet',\n            isHidden: !handleConditionallyShowElement(\n              formElementsCtrl,\n              element,\n              errorCallback,\n            ),\n            entries: (entries || []).reduce(\n              (\n                result: Record<\n                  string,\n                  FormElementsConditionallyShown | undefined\n                >,\n                entry,\n                index,\n              ) => {\n                result[index.toString()] =\n                  generateFormElementsConditionallyShownWithParent({\n                    formElements: element.elements,\n                    submission: entry,\n                    parentFormElementsCtrl: formElementsCtrl,\n                  })\n                return result\n              },\n              {},\n            ),\n          }\n          break\n        }\n        default: {\n          if (formElementsConditionallyShown[element.name]) {\n            break\n          }\n          const formElementConditionallyShown: FormElementConditionallyShown = {\n            type: 'formElement',\n            isHidden: !handleConditionallyShowElement(\n              formElementsCtrl,\n              element,\n              errorCallback,\n            ),\n          }\n\n          if (!formElementConditionallyShown.isHidden) {\n            const optionsElement =\n              typeCastService.formElements.toOptionsElement(element)\n            if (\n              optionsElement &&\n              optionsElement.conditionallyShowOptions &&\n              Array.isArray(optionsElement.options)\n            ) {\n              formElementConditionallyShown.options =\n                optionsElement.options.filter((option) =>\n                  handleConditionallyShowOption(\n                    formElementsCtrl,\n                    optionsElement,\n                    option,\n                    errorCallback,\n                  ),\n                )\n            }\n          }\n\n          formElementsConditionallyShown[element.name] =\n            formElementConditionallyShown\n        }\n      }\n\n      return formElementsConditionallyShown\n    },\n    {},\n  )\n}\n\n/**\n * Given a form element and submission data, evaluate which elements are\n * currently shown. The function also takes an optional errorCallback for\n * handling errors caught during the evaluation.\n *\n * #### Example\n *\n * ```js\n * const formElementsConditionallyShown =\n *   conditionalLogicService.generateFormElementsConditionallyShown({\n *     submission: {\n *       radio: ['hide'],\n *       text: 'hidden text',\n *     },\n *     formElements: [\n *       {\n *         name: 'radio',\n *         label: 'Radio',\n *         type: 'radio',\n *         required: false,\n *         id: '5ef3beb8-8ac8-4c8d-9fd3-d8197113bf54',\n *         conditionallyShow: false,\n *         options: [\n *           {\n *             id: '9a44e15a-5929-419d-825e-b3dc0a29591f',\n *             label: 'Show',\n *             value: 'show',\n *           },\n *           {\n *             id: 'd776ed42-072c-4bf8-9879-874b2bef85d3',\n *             label: 'Hide',\n *             value: 'Hide',\n *           },\n *         ],\n *         readOnly: false,\n *         isDataLookup: false,\n *         isElementLookup: false,\n *         buttons: false,\n *         optionsType: 'CUSTOM',\n *         conditionallyShowOptions: false,\n *       },\n *       {\n *         name: 'text',\n *         label: 'Text',\n *         type: 'text',\n *         required: false,\n *         id: '8fbddb41-348d-494c-904b-56a2c4361f13',\n *         requiresAllConditionallyShowPredicates: false,\n *         conditionallyShow: true,\n *         conditionallyShowPredicates: [\n *           {\n *             elementId: '5ef3beb8-8ac8-4c8d-9fd3-d8197113bf54',\n *             optionIds: ['9a44e15a-5929-419d-825e-b3dc0a29591f'],\n *             type: 'OPTIONS',\n *           },\n *         ],\n *         readOnly: false,\n *         isDataLookup: false,\n *         isElementLookup: false,\n *       },\n *     ],\n *     parentFormElementsCtrl: undefined,\n *     errorCallback: (error) => {\n *       //do something with the error here\n *       console.error(error)\n *     },\n *   })\n * ```\n *\n * The above example returns an object like below\n *\n * ```json\n * {\n *   \"radio\": {\n *     \"isHidden\": false,\n *     \"type\": \"formElement\"\n *   },\n *   \"text\": {\n *     \"isHidden\": true,\n *     \"type\": \"formElement\"\n *   }\n * }\n * ```\n *\n * @param parameters\n * @returns\n */\nexport function generateFormElementsConditionallyShown(\n  parameters: FormElementsConditionallyShownParameters,\n): FormElementsConditionallyShown {\n  return generateFormElementsConditionallyShownWithParent(parameters)\n}\n"]}