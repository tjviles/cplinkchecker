{"version":3,"file":"conditionallyShowOption.js","sourceRoot":"","sources":["../../src/conditionalLogicService/conditionallyShowOption.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormTypes, SubmissionTypes } from '@oneblink/types'\nimport evaluateConditionalOptionsPredicate from './evaluateConditionalOptionsPredicate'\nimport { FormElementsCtrl } from '../types'\nimport { typeCastService } from '..'\nimport conditionallyShowElement from './conditionallyShowElement'\n\nconst handleAttributePredicate = (\n  predicate: FormTypes.ChoiceElementOptionAttribute,\n  model: SubmissionTypes.S3SubmissionData['submission'],\n  predicateElement: FormTypes.FormElementWithOptions,\n) => {\n  const values = model[predicateElement.name]\n  if (!values) return true\n\n  if (\n    Array.isArray(values) &&\n    (!values.length ||\n      !values.filter((value) => typeof value !== 'undefined').length)\n  ) {\n    return true\n  }\n\n  return evaluateConditionalOptionsPredicate({\n    predicate: {\n      type: 'OPTIONS',\n      elementId: predicate.elementId,\n      optionIds: predicate.optionIds,\n    },\n    predicateValue: values,\n    predicateElement,\n  })\n}\n\nconst conditionallyShowOptionByPredicate = (\n  formElementsCtrl: FormElementsCtrl,\n  predicate: FormTypes.ChoiceElementOptionAttribute,\n  elementsEvaluated: string[],\n): boolean => {\n  // Validate the predicate data, if it is invalid,\n  // we will always show the field\n  if (\n    !predicate ||\n    !predicate.elementId ||\n    !predicate.optionIds ||\n    !predicate.optionIds.length\n  ) {\n    return true\n  }\n\n  const predicateElement = formElementsCtrl.flattenedElements.find(\n    (element) => {\n      return element.id === predicate.elementId\n    },\n  )\n\n  // If we cant find the element used for the predicate,\n  // we can check to see if the element being evaluated\n  // is in a repeatable set and the predicate element is\n  // in a parent list of elements.\n  if (!predicateElement) {\n    if (formElementsCtrl.parentFormElementsCtrl) {\n      return conditionallyShowOptionByPredicate(\n        formElementsCtrl.parentFormElementsCtrl,\n        predicate,\n        elementsEvaluated,\n      )\n    } else {\n      return false\n    }\n  }\n\n  const optionsPredicateElement =\n    typeCastService.formElements.toOptionsElement(predicateElement)\n  if (!optionsPredicateElement) {\n    return false\n  }\n\n  // If the predicate element does not have any options to evaluate,\n  // we will show the element.\n  // Unless the predicate element has dynamic options and\n  // options have not been fetched yet.\n  if (!Array.isArray(optionsPredicateElement.options)) {\n    return optionsPredicateElement.optionsType !== 'DYNAMIC'\n  }\n\n  const everyOptionIsShowing = predicate.optionIds.every((id) => {\n    const predicateOption = optionsPredicateElement.options?.find(\n      (o) => o.id === id,\n    )\n    if (!predicateOption) return false\n\n    return conditionallyShowOption(\n      { model: formElementsCtrl.model, flattenedElements: [] },\n      optionsPredicateElement,\n      predicateOption,\n      elementsEvaluated,\n    )\n  })\n\n  if (!everyOptionIsShowing) {\n    return false\n  }\n\n  // Check to see if the model has one of the valid values to show the element\n  return handleAttributePredicate(\n    predicate,\n    formElementsCtrl.model,\n    optionsPredicateElement,\n  )\n}\n\nconst isAttributeFilterValid = (\n  formElementsCtrl: FormElementsCtrl,\n  predicate: FormTypes.ChoiceElementOptionAttribute,\n  elementsEvaluated: string[],\n): boolean => {\n  const predicateElement = formElementsCtrl.flattenedElements.find(\n    (element) => {\n      return element.id === predicate.elementId\n    },\n  )\n\n  // If we cant find the element used for the predicate,\n  // we can check to see if the element being evaluated\n  // is in a repeatable set and the predicate element is\n  // in a parent list of elements.\n  if (!predicateElement) {\n    if (formElementsCtrl.parentFormElementsCtrl) {\n      return isAttributeFilterValid(\n        formElementsCtrl.parentFormElementsCtrl,\n        predicate,\n        elementsEvaluated,\n      )\n    } else {\n      return false\n    }\n  }\n\n  // now we have the model and predicate element, verify that the predicate element\n  // is not hidden\n  if (\n    // Will never be a page, just making typescript happy :)\n    predicateElement.type === 'page' ||\n    predicateElement.type === 'section' ||\n    !conditionallyShowElement(formElementsCtrl, predicateElement, [])\n  ) {\n    return false\n  }\n\n  // verify that at least one option is selected\n  const values = formElementsCtrl.model[predicateElement.name]\n  if (!values) return false\n  // if the model value is an array, verify that it has a selection\n  if (\n    Array.isArray(values) &&\n    (!values.length ||\n      !values.filter((value) => typeof value !== 'undefined').length)\n  ) {\n    return false\n  }\n\n  return true\n}\n\nexport default function conditionallyShowOption(\n  formElementsCtrl: FormElementsCtrl,\n  elementToEvaluate: FormTypes.FormElementWithOptions,\n  optionToEvaluate: FormTypes.ChoiceElementOption,\n  optionsEvaluated: string[],\n): boolean {\n  // If the element does not have the `conditionallyShow` flag set,\n  // we can always show the element.\n\n  if (\n    !elementToEvaluate.conditionallyShowOptions ||\n    !optionToEvaluate ||\n    !optionToEvaluate.attributes ||\n    !Array.isArray(optionToEvaluate.attributes) ||\n    !optionToEvaluate.attributes.length\n  ) {\n    return true\n  }\n\n  // Check to see if this element has already been used to evaluate\n  // if the element should be shown based on parent element conditional logic\n  if (optionsEvaluated.some((optionId) => optionId === optionToEvaluate.id)) {\n    throw new Error(\n      'Your conditional logic has caused an infinite loop. Check the following Fields to ensure element A does not rely on element B if element B also relies on element A.',\n    )\n  } else {\n    optionsEvaluated.push(optionToEvaluate.id)\n  }\n\n  const validPredicates = (optionToEvaluate.attributes || []).filter(\n    (predicate) => {\n      return isAttributeFilterValid(\n        formElementsCtrl,\n        predicate,\n        optionsEvaluated,\n      )\n    },\n  )\n\n  if (!validPredicates.length) return true\n  return validPredicates.some((predicate) =>\n    conditionallyShowOptionByPredicate(\n      formElementsCtrl,\n      predicate,\n      optionsEvaluated,\n    ),\n  )\n}\n"]}