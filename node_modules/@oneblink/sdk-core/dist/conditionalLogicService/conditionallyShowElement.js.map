{"version":3,"file":"conditionallyShowElement.js","sourceRoot":"","sources":["../../src/conditionalLogicService/conditionallyShowElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormTypes, ConditionTypes } from '@oneblink/types'\nimport { FormElementsCtrl } from '../types'\nimport evaluateConditionalPredicate from './evaluateConditionalPredicate'\n\nconst getParentFormElements = (\n  formElementsCtrl: FormElementsCtrl,\n  childElement: FormTypes.FormElement,\n): Array<FormTypes.SectionElement | FormTypes.PageElement> => {\n  const parentElement = formElementsCtrl.flattenedElements.find((element) => {\n    return (\n      (element.type === 'page' || element.type === 'section') &&\n      element.elements.some(({ id }) => id === childElement.id)\n    )\n  })\n  if (\n    parentElement &&\n    (parentElement.type === 'page' || parentElement.type === 'section')\n  ) {\n    return [\n      parentElement,\n      ...getParentFormElements(formElementsCtrl, parentElement),\n    ]\n  }\n  return []\n}\n\nconst conditionallyShowByPredicate = (\n  formElementsCtrl: FormElementsCtrl,\n  predicate: ConditionTypes.ConditionalPredicate,\n  elementsEvaluated: Array<{ id: string; label: string }>,\n): FormTypes.FormElement | boolean => {\n  const predicateElement = evaluateConditionalPredicate({\n    predicate,\n    formElementsCtrl,\n  })\n\n  if (!predicateElement) {\n    return false\n  }\n\n  // Here we will also need to check if the predicate element\n  // is on a page/section element and the page/section element\n  // is also hidden. If it is hidden we will treat this\n  // predicate element as hidden as well.\n  const parentFormElements = getParentFormElements(\n    formElementsCtrl,\n    predicateElement,\n  )\n  for (const parentFormElement of parentFormElements) {\n    if (\n      !conditionallyShowElement(formElementsCtrl, parentFormElement, [\n        ...elementsEvaluated,\n      ])\n    ) {\n      return false\n    }\n  }\n\n  // Check to see if the model has one of the valid values to show the element\n  return conditionallyShowElement(\n    formElementsCtrl,\n    predicateElement,\n    elementsEvaluated,\n  )\n}\n\nexport default function conditionallyShowElement(\n  formElementsCtrl: FormElementsCtrl,\n  elementToEvaluate: FormTypes.FormElement,\n  elementsEvaluated: Array<{ id: string; label: string }>,\n): boolean {\n  // If the element does not have the `conditionallyShow` flag set,\n  // we can always show the element.\n  if (\n    !elementToEvaluate ||\n    !elementToEvaluate.conditionallyShow ||\n    !Array.isArray(elementToEvaluate.conditionallyShowPredicates) ||\n    !elementToEvaluate.conditionallyShowPredicates.length\n  ) {\n    return true\n  }\n  const conditionallyShowPredicates =\n    elementToEvaluate.conditionallyShowPredicates\n\n  // Check to see if this element has already been used to evaluate\n  // if the element should be shown based on parent element conditional logic\n  const elementAlreadyEvaluated = elementsEvaluated.find(\n    ({ id }) => id === elementToEvaluate.id,\n  )\n  if (elementAlreadyEvaluated) {\n    throw new Error(\n      `Your conditional logic has caused an infinite loop. Check the \"${elementAlreadyEvaluated.label}\" form element to ensure element A does not rely on element B if element B also relies on element A.`,\n    )\n  } else {\n    elementsEvaluated.push({\n      id: elementToEvaluate.id,\n      label:\n        elementToEvaluate.type === 'form' ||\n        elementToEvaluate.type === 'infoPage'\n          ? elementToEvaluate.name\n          : elementToEvaluate.label,\n    })\n  }\n\n  const predicateFunction = (\n    predicate: ConditionTypes.ConditionalPredicate,\n  ) => {\n    // Spread the array of elements evaluated so that each predicate can\n    // evaluate the tree without causing false positives for infinite\n    // loop conditional logic\n    return conditionallyShowByPredicate(formElementsCtrl, predicate, [\n      ...elementsEvaluated,\n    ])\n  }\n\n  if (elementToEvaluate.requiresAllConditionallyShowPredicates) {\n    return conditionallyShowPredicates.every(predicateFunction)\n  } else {\n    return conditionallyShowPredicates.some(predicateFunction)\n  }\n}\n"]}