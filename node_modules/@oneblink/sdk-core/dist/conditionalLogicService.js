"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateConditionalPredicates = void 0;
const evaluateConditionalPredicate_1 = __importDefault(require("./conditionalLogicService/evaluateConditionalPredicate"));
const formElementsService_1 = require("./formElementsService");
__exportStar(require("./conditionalLogicService/generateFormElementsConditionallyShown"), exports);
/**
 * Given a set of form elements and submission data, evaluate if predicates are
 * met or not.
 *
 * #### Example
 *
 * ```js
 * const evaluation = conditionalLogicService.evaluateConditionalPredicates(
 *   {
 *     isConditional: true,
 *     requiresAllConditionalPredicates: false,
 *     conditionalPredicates: [
 *       {
 *         type: 'OPTIONS',
 *         elementId: '3534abe4-b0b5-4ffa-a216-49c223ab6f95',
 *         optionIds: ['9ce633dd-22d6-4e0e-a9e0-1aa62d435e72'],
 *       },
 *     ],
 *     submission: {
 *       checkboxes: ['a'],
 *     },
 *     formElements: [
 *       {
 *         name: 'checkboxes',
 *         label: 'Checkboxes',
 *         type: 'checkboxes',
 *         required: false,
 *         id: '3534abe4-b0b5-4ffa-a216-49c223ab6f95',
 *         options: [
 *           {
 *             id: '9ce633dd-22d6-4e0e-a9e0-1aa62d435e72',
 *             label: 'First',
 *             value: 'a',
 *           },
 *           {
 *             id: '5850b32c-3833-4498-a072-47fcc8122242',
 *             label: 'Second',
 *             value: 'b',
 *           },
 *           {
 *             id: 'ab363e9f-a63f-4923-ba0d-47892fc26a93',
 *             label: 'Third',
 *             value: 'c',
 *           },
 *         ],
 *         readOnly: false,
 *         buttons: false,
 *         optionsType: 'CUSTOM',
 *         conditionallyShowOptions: false,
 *         isDataLookup: false,
 *         isElementLookup: false,
 *         conditionallyShow: false,
 *         requiresAllConditionallyShowPredicates: false,
 *       },
 *     ],
 *   },
 * )
 * ```
 *
 * @param options
 * @returns
 */
function evaluateConditionalPredicates({ isConditional, requiresAllConditionalPredicates, conditionalPredicates, formElements, submission, }) {
    if (!isConditional || !conditionalPredicates.length) {
        return true;
    }
    const formElementsCtrl = {
        flattenedElements: (0, formElementsService_1.flattenFormElements)(formElements),
        model: submission,
    };
    const predicateFn = (predicate) => (0, evaluateConditionalPredicate_1.default)({
        predicate,
        formElementsCtrl,
    });
    if (requiresAllConditionalPredicates) {
        return conditionalPredicates.every(predicateFn);
    }
    else {
        return conditionalPredicates.some(predicateFn);
    }
}
exports.evaluateConditionalPredicates = evaluateConditionalPredicates;
//# sourceMappingURL=conditionalLogicService.js.map