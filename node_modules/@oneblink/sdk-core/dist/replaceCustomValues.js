"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceCustomValues = exports.getElementSubmissionValue = void 0;
const formElementsService_1 = require("./formElementsService");
const abnService_1 = require("./abnService");
const CUSTOM_VALUES = [
    {
        string: '{INFO_PAGE_ID}',
        value: ({ form }) => form.id.toString(),
    },
    {
        string: '{INFO_PAGE_NAME}',
        value: ({ form }) => form.name,
    },
    {
        string: '{FORM_ID}',
        value: ({ form }) => form.id.toString(),
    },
    {
        string: '{FORM_NAME}',
        value: ({ form }) => form.name,
    },
    {
        string: '{DATE}',
        value: ({ submissionTimestamp, formatDate, formatTime, }) => {
            if (!submissionTimestamp) {
                return '';
            }
            return `${formatDate(submissionTimestamp)} ${formatTime(submissionTimestamp)}`;
        },
    },
    {
        string: '{TIMESTAMP}',
        value: ({ submissionTimestamp }) => submissionTimestamp || '',
    },
    {
        string: '{SUBMISSION_ID}',
        value: ({ submissionId }) => submissionId || '',
    },
    {
        string: '{EXTERNAL_ID}',
        value: ({ externalId }) => externalId || '',
    },
    {
        string: '{PREVIOUS_APPROVAL_ID}',
        value: ({ previousApprovalId }) => previousApprovalId || '',
    },
];
/**
 * Function to get the display value of a property in submission
 *
 * #### Example
 *
 * ```typescript
 *
 * const result = submissionService.getElementSubmissionValue({
 *   propertyName: 'search',
 *   submission: {
 *     search: 'Entered By User',
 *   },
 *   formElements: [
 *     {
 *       id: 'd4135b47-9004-4d75-aeb3-d2f6232da111',
 *       name: 'search',
 *       type: 'text',
 *       label: 'Search',
 *       readOnly: false,
 *       required: false,
 *       conditionallyShow: false,
 *       requiresAllConditionallyShowPredicates: false,
 *       isElementLookup: false,
 *       isDataLookup: false,
 *     },
 *   ],
 *   formatDate: (value) => new Date(value).toDateString(),
 *   formatTime: (value) => new Date(value).toTimeString(),
 *   formatNumber: (value) => Number(value).toString(),
 *   formatCurrency: (value) => Number(value).toFixed(2),
 * }: {
 *   propertyName: string
 *   formElements: FormTypes.FormElement[]
 *   submission: SubmissionTypes.S3SubmissionData['submission']
 *   formatDate: (value: string) => string
 *   formatTime: (value: string) => string
 *   formatNumber: (value: number) => string
 *   formatCurrency: (value: number) => string
 * })
 * ```
 *
 * @param options
 * @returns
 */
function getElementSubmissionValue({ propertyName, submission, formElements, formatDate, formatTime, formatNumber, formatCurrency, }) {
    var _a, _b, _c;
    const formElement = (0, formElementsService_1.findFormElement)(formElements, (element) => element.type !== 'page' &&
        element.type !== 'section' &&
        element.name === propertyName);
    const unknown = submission[propertyName];
    if (unknown === undefined || unknown === null) {
        return undefined;
    }
    switch (formElement === null || formElement === void 0 ? void 0 : formElement.type) {
        case 'datetime': {
            const value = unknown;
            return `${formatDate(value)} ${formatTime(value)}`;
        }
        case 'date': {
            const value = unknown;
            return formatDate(value);
        }
        case 'time': {
            const value = unknown;
            return formatTime(value);
        }
        case 'radio':
        case 'autocomplete': {
            const value = unknown;
            const option = (_a = formElement.options) === null || _a === void 0 ? void 0 : _a.find((opt) => opt.value === value);
            return (option === null || option === void 0 ? void 0 : option.label) || value;
        }
        case 'checkboxes': {
            const value = unknown;
            const selectedOptionLabels = value.reduce((labels, selectedOption) => {
                var _a;
                const foundOption = (_a = formElement.options) === null || _a === void 0 ? void 0 : _a.find((o) => o.value === selectedOption);
                if (foundOption)
                    labels.push(foundOption.label);
                return labels;
            }, []);
            return selectedOptionLabels.length ? selectedOptionLabels : undefined;
        }
        case 'compliance': {
            const value = unknown;
            const option = (formElement.options || []).find((option) => option.value === value.value);
            return {
                ...value,
                value: (option === null || option === void 0 ? void 0 : option.label) || value.value,
            };
        }
        case 'select': {
            if (formElement.multi) {
                const value = unknown;
                const selectedOptionLabels = value.reduce((labels, selectedOption) => {
                    var _a;
                    const foundOption = (_a = formElement.options) === null || _a === void 0 ? void 0 : _a.find((o) => o.value === selectedOption);
                    if (foundOption)
                        labels.push(foundOption.label);
                    return labels;
                }, []);
                return selectedOptionLabels.length ? selectedOptionLabels : undefined;
            }
            else {
                const value = unknown;
                const option = (_b = formElement.options) === null || _b === void 0 ? void 0 : _b.find((opt) => opt.value === value);
                return (option === null || option === void 0 ? void 0 : option.label) || '';
            }
        }
        case 'boolean': {
            const value = unknown;
            return value ? 'Yes' : 'No';
        }
        case 'calculation': {
            const value = unknown;
            if (!Number.isNaN(value) && Number.isFinite(value)) {
                let text;
                if (formElement.displayAsCurrency) {
                    text = formatCurrency(value);
                }
                else {
                    text = formatNumber(value);
                }
                return text;
            }
            return undefined;
        }
        case 'pointAddress':
        case 'geoscapeAddress': {
            const value = unknown;
            return ((_c = value === null || value === void 0 ? void 0 : value.addressDetails) === null || _c === void 0 ? void 0 : _c.formattedAddress) || (value === null || value === void 0 ? void 0 : value.addressId);
        }
        case 'civicaStreetName': {
            const value = unknown;
            return value === null || value === void 0 ? void 0 : value.formattedStreet;
        }
        case 'civicaNameRecord': {
            const value = unknown;
            return ([value === null || value === void 0 ? void 0 : value.title, value === null || value === void 0 ? void 0 : value.givenName1, value === null || value === void 0 ? void 0 : value.familyName]
                .filter((t) => t)
                .join(' ') || (value === null || value === void 0 ? void 0 : value.emailAddress));
        }
        case 'abn': {
            const value = unknown;
            return value ? (0, abnService_1.getABNNumberFromABNRecord)(value) : undefined;
        }
        default: {
            return unknown;
        }
    }
}
exports.getElementSubmissionValue = getElementSubmissionValue;
function replaceElementValues(text, { form, submission, formatDate, formatTime, formatNumber, formatCurrency, }) {
    const matches = text.match(/({ELEMENT:)([^}]+)(})/g);
    if (!matches) {
        return text;
    }
    return matches.reduce((newString, match) => {
        const propertyName = match.substring(match.indexOf(':') + 1, match.lastIndexOf('}'));
        const value = getElementSubmissionValue({
            propertyName,
            formElements: form.elements,
            submission,
            formatDate,
            formatTime,
            formatNumber,
            formatCurrency,
        });
        return newString.replace(match, value === undefined ? '' : value);
    }, text);
}
/**
 * Function to replace a custom values in text
 *
 * #### Example
 *
 * ```js
 * const result = submissionService.replaceCustomValues(
 *   'https://example.com/path?submissionId={SUBMISSION_ID}&externalId={EXTERNAL_ID}&search{ELEMENT:search}',
 *   {
 *     submissionId: 'abc-123',
 *     submissionTimestamp: '2021-07-02T02:19:13.670Z',
 *     formatDate: (value) => new Date(value).toDateString(),
 *     formatTime: (value) => new Date(value).toTimeString(),
 *     submission: {
 *       search: 'Entered By User',
 *     },
 *     form: {
 *       id: 1,
 *       name: 'Form',
 *       organisationId: '',
 *       formsAppEnvironmentId: 1,
 *       formsAppIds: [],
 *       isAuthenticated: false,
 *       isMultiPage: false,
 *       isInfoPage: false,
 *       postSubmissionAction: 'FORMS_LIBRARY',
 *       cancelAction: 'FORMS_LIBRARY',
 *       submissionEvents: [],
 *       tags: [],
 *       elements: [
 *         {
 *           id: 'd4135b47-9004-4d75-aeb3-d2f6232da111',
 *           name: 'search',
 *           type: 'text',
 *           label: 'Search',
 *           readOnly: false,
 *           required: false,
 *           conditionallyShow: false,
 *           requiresAllConditionallyShowPredicates: false,
 *           isElementLookup: false,
 *           isDataLookup: false,
 *         },
 *       ],
 *     },
 *   },
 * )
 * ```
 *
 * @param text
 * @param options
 * @returns
 */
function replaceCustomValues(text, { form, submission, externalId, submissionId, submissionTimestamp, formatDate, formatTime, formatNumber, formatCurrency, previousApprovalId, }) {
    const string = replaceElementValues(text, {
        form,
        submission,
        formatDate,
        formatTime,
        formatNumber,
        formatCurrency,
    });
    return CUSTOM_VALUES.reduce((newString, customValue) => {
        return newString.replace(customValue.string, customValue.value({
            form,
            submissionTimestamp,
            externalId,
            submissionId,
            formatDate,
            formatTime,
            formatNumber,
            formatCurrency,
            previousApprovalId,
        }));
    }, string);
}
exports.replaceCustomValues = replaceCustomValues;
//# sourceMappingURL=replaceCustomValues.js.map