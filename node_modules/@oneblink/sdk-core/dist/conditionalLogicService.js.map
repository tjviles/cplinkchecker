{"version":3,"file":"conditionalLogicService.js","sourceRoot":"","sources":["../src/conditionalLogicService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0HAAiG;AACjG,+DAA2D;AAG3D,mGAAgF;AAEhF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6DG;AACH,SAAgB,6BAA6B,CAAC,EAC5C,aAAa,EACb,gCAAgC,EAChC,qBAAqB,EACrB,YAAY,EACZ,UAAU,GAOX;IACC,IAAI,CAAC,aAAa,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE;QACnD,OAAO,IAAI,CAAA;KACZ;IACD,MAAM,gBAAgB,GAAG;QACvB,iBAAiB,EAAE,IAAA,yCAAmB,EAAC,YAAY,CAAC;QACpD,KAAK,EAAE,UAAU;KAClB,CAAA;IAED,MAAM,WAAW,GAAG,CAAC,SAA8C,EAAE,EAAE,CACrE,IAAA,sCAA4B,EAAC;QAC3B,SAAS;QACT,gBAAgB;KACjB,CAAC,CAAA;IACJ,IAAI,gCAAgC,EAAE;QACpC,OAAO,qBAAqB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;KAChD;SAAM;QACL,OAAO,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;KAC/C;AACH,CAAC;AA/BD,sEA+BC","sourcesContent":["import evaluateConditionalPredicate from './conditionalLogicService/evaluateConditionalPredicate'\nimport { flattenFormElements } from './formElementsService'\nimport { ConditionTypes, FormTypes, SubmissionTypes } from '@oneblink/types'\n\nexport * from './conditionalLogicService/generateFormElementsConditionallyShown'\n\n/**\n * Given a set of form elements and submission data, evaluate if predicates are\n * met or not.\n *\n * #### Example\n *\n * ```js\n * const evaluation = conditionalLogicService.evaluateConditionalPredicates(\n *   {\n *     isConditional: true,\n *     requiresAllConditionalPredicates: false,\n *     conditionalPredicates: [\n *       {\n *         type: 'OPTIONS',\n *         elementId: '3534abe4-b0b5-4ffa-a216-49c223ab6f95',\n *         optionIds: ['9ce633dd-22d6-4e0e-a9e0-1aa62d435e72'],\n *       },\n *     ],\n *     submission: {\n *       checkboxes: ['a'],\n *     },\n *     formElements: [\n *       {\n *         name: 'checkboxes',\n *         label: 'Checkboxes',\n *         type: 'checkboxes',\n *         required: false,\n *         id: '3534abe4-b0b5-4ffa-a216-49c223ab6f95',\n *         options: [\n *           {\n *             id: '9ce633dd-22d6-4e0e-a9e0-1aa62d435e72',\n *             label: 'First',\n *             value: 'a',\n *           },\n *           {\n *             id: '5850b32c-3833-4498-a072-47fcc8122242',\n *             label: 'Second',\n *             value: 'b',\n *           },\n *           {\n *             id: 'ab363e9f-a63f-4923-ba0d-47892fc26a93',\n *             label: 'Third',\n *             value: 'c',\n *           },\n *         ],\n *         readOnly: false,\n *         buttons: false,\n *         optionsType: 'CUSTOM',\n *         conditionallyShowOptions: false,\n *         isDataLookup: false,\n *         isElementLookup: false,\n *         conditionallyShow: false,\n *         requiresAllConditionallyShowPredicates: false,\n *       },\n *     ],\n *   },\n * )\n * ```\n *\n * @param options\n * @returns\n */\nexport function evaluateConditionalPredicates({\n  isConditional,\n  requiresAllConditionalPredicates,\n  conditionalPredicates,\n  formElements,\n  submission,\n}: {\n  isConditional: boolean\n  requiresAllConditionalPredicates: boolean\n  conditionalPredicates: ConditionTypes.ConditionalPredicate[]\n  formElements: FormTypes.FormElement[]\n  submission: SubmissionTypes.S3SubmissionData['submission']\n}): boolean {\n  if (!isConditional || !conditionalPredicates.length) {\n    return true\n  }\n  const formElementsCtrl = {\n    flattenedElements: flattenFormElements(formElements),\n    model: submission,\n  }\n\n  const predicateFn = (predicate: ConditionTypes.ConditionalPredicate) =>\n    evaluateConditionalPredicate({\n      predicate,\n      formElementsCtrl,\n    })\n  if (requiresAllConditionalPredicates) {\n    return conditionalPredicates.every(predicateFn)\n  } else {\n    return conditionalPredicates.some(predicateFn)\n  }\n}\n"]}