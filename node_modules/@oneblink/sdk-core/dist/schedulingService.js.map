{"version":3,"file":"schedulingService.js","sourceRoot":"","sources":["../src/schedulingService.ts"],"names":[],"mappings":";;;AAKA,wBAA2C;AAE3C;;;;;;;;;;;;;;;;GAgBG;AACH,SAAgB,uBAAuB,CACrC,UAA0B,EAC1B,UAA0D;IAE1D,MAAM,0BAA0B,GAAG,UAAU,CAAC,gBAAgB,IAAI,EAAE,CAAA;IACpE,OAAO,0BAA0B,CAAC,IAAI,CAAC,CAAC,yBAAyB,EAAE,EAAE,CACnE,0BAAuB,CAAC,6BAA6B,CAAC;QACpD,aAAa,EAAE,CAAC,CAAC,yBAAyB,CAAC,oBAAoB;QAC/D,gCAAgC,EAC9B,CAAC,CAAC,yBAAyB,CAAC,yCAAyC;QACvE,qBAAqB,EACnB,yBAAyB,CAAC,8BAA8B,IAAI,EAAE;QAChE,UAAU,EAAE,UAAU;QACtB,YAAY,EAAE,UAAU,CAAC,QAAQ;KAClC,CAAC,CACH,CAAA;AACH,CAAC;AAhBD,0DAgBC","sourcesContent":["import {\n  FormTypes,\n  SubmissionEventTypes,\n  SubmissionTypes,\n} from '@oneblink/types'\nimport { conditionalLogicService } from '.'\n\n/**\n * Examine a submission and its form definition to validate whether a scheduling\n * workflow event needs to run.\n *\n * #### Example\n *\n * ```js\n * const result = schedulingService.checkFormSchedulingEvent(\n *   form,\n *   submission,\n * )\n * ```\n *\n * @param definition\n * @param submission\n * @returns\n */\nexport function checkForSchedulingEvent(\n  definition: FormTypes.Form,\n  submission: SubmissionTypes.S3SubmissionData['submission'],\n): SubmissionEventTypes.SchedulingSubmissionEvent | undefined {\n  const schedulingSubmissionEvents = definition.schedulingEvents || []\n  return schedulingSubmissionEvents.find((schedulingSubmissionEvent) =>\n    conditionalLogicService.evaluateConditionalPredicates({\n      isConditional: !!schedulingSubmissionEvent.conditionallyExecute,\n      requiresAllConditionalPredicates:\n        !!schedulingSubmissionEvent.requiresAllConditionallyExecutePredicates,\n      conditionalPredicates:\n        schedulingSubmissionEvent.conditionallyExecutePredicates || [],\n      submission: submission,\n      formElements: definition.elements,\n    }),\n  )\n}\n"]}