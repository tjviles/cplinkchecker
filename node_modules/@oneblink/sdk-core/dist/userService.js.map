{"version":3,"file":"userService.js","sourceRoot":"","sources":["../src/userService.ts"],"names":[],"mappings":"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","sourcesContent":["import { MiscTypes } from '@oneblink/types'\n\n/**\n * Parse a User Profile based on a JWT payload. Will return `undefined` if not a\n * valid JWT payload\n *\n * #### Example\n *\n * ```js\n * import jwtDecode from 'jwt-decode'\n *\n * const jwtPayload = jwtDecode('a valid token from a user')\n * const userProfile = userService.parseUserProfile(jwtPayload)\n * if (userProfile) {\n *   // continue\n * }\n * ```\n *\n * @param data An object containing all parameters to be passed to the function\n */\nexport function parseUserProfile(\n  data: unknown,\n): MiscTypes.UserProfile | undefined {\n  if (typeof data !== 'object' || !data) {\n    return\n  }\n  const jwtPayload = data as Record<string, unknown>\n  if (typeof jwtPayload.sub !== 'string') {\n    return\n  }\n  const userProfile: MiscTypes.UserProfile = {\n    isSAMLUser: false,\n    providerType: 'Cognito',\n    providerUserId: jwtPayload.sub,\n    userId: jwtPayload.sub,\n    email: typeof jwtPayload.email === 'string' ? jwtPayload.email : undefined,\n    emailVerified:\n      typeof jwtPayload.email_verified === 'boolean'\n        ? jwtPayload.email_verified\n        : undefined,\n    firstName:\n      typeof jwtPayload.given_name === 'string'\n        ? jwtPayload.given_name\n        : undefined,\n    lastName:\n      typeof jwtPayload.family_name === 'string'\n        ? jwtPayload.family_name\n        : undefined,\n    fullName: typeof jwtPayload.name === 'string' ? jwtPayload.name : undefined,\n    picture:\n      typeof jwtPayload.picture === 'string' ? jwtPayload.picture : undefined,\n    role:\n      typeof jwtPayload['custom:role'] === 'string'\n        ? jwtPayload['custom:role']\n        : undefined,\n    username:\n      typeof jwtPayload.email === 'string' ? jwtPayload.email : jwtPayload.sub,\n    supervisor: {\n      fullName:\n        typeof jwtPayload['custom:supervisor_name'] === 'string'\n          ? jwtPayload['custom:supervisor_name']\n          : undefined,\n      email:\n        typeof jwtPayload['custom:supervisor_email'] === 'string'\n          ? jwtPayload['custom:supervisor_email']\n          : undefined,\n      providerUserId:\n        typeof jwtPayload['custom:supervisor_user_id'] === 'string'\n          ? jwtPayload['custom:supervisor_user_id']\n          : undefined,\n    },\n    phoneNumber:\n      typeof jwtPayload['custom:phone_number'] === 'string'\n        ? jwtPayload['custom:phone_number']\n        : undefined,\n    phoneNumberVerified:\n      typeof jwtPayload['custom:phone_number_verified'] === 'boolean'\n        ? jwtPayload['custom:phone_number_verified']\n        : undefined,\n  }\n\n  if (\n    !userProfile.supervisor?.fullName &&\n    !userProfile.supervisor?.email &&\n    !userProfile.supervisor?.providerUserId\n  ) {\n    userProfile.supervisor = undefined\n  }\n\n  if (\n    jwtPayload.identities &&\n    Array.isArray(jwtPayload.identities) &&\n    jwtPayload.identities.length\n  ) {\n    const { providerType, userId } = jwtPayload.identities[0]\n    userProfile.providerType = providerType\n    userProfile.providerUserId = userId\n    userProfile.isSAMLUser = providerType === 'SAML'\n    if (userProfile.isSAMLUser) {\n      userProfile.username = jwtPayload.preferred_username || userId\n    }\n  }\n\n  return userProfile\n}\n\n/**\n * A friendly `string` that represents the a [User Profile](#user-profile). Uses\n * first name, last name, full name, email address or username.\n *\n * #### Example\n *\n * ```js\n * const userProfile = userService.parseUserProfile(jwtPayload)\n * const name = userService.getUserFriendlyName(userProfile)\n * if (name) {\n *   // Display current user's name\n * }\n * ```\n *\n * @param userProfile\n * @returns\n */\nexport function getUserFriendlyName(\n  userProfile: MiscTypes.UserProfile,\n): string {\n  if (userProfile.fullName) {\n    return userProfile.fullName\n  }\n\n  if (userProfile.firstName || userProfile.lastName) {\n    return [userProfile.firstName, userProfile.lastName].join(' ').trim()\n  }\n\n  if (userProfile.email) {\n    return userProfile.email\n  }\n\n  if (userProfile.username) {\n    return userProfile.username\n  }\n\n  return userProfile.userId\n}\n"]}